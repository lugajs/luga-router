DOCS:

- Multiple router instances are possible (explain the implications)

- Priority rely on order of registration. RouteHandlers are processed from top to bottom, the first match win.
  If no match is found, nothing happens
- Greedy mode allows multiple routeHandlers matching (false by default). Less efficient

- Router.add() is overloaded, explain signatures
  Path can only be strings, RexExp aren't allowed

- routeContext properties: path, fragment, payload, historyState, params

- Router.normalizeHash()
- Router.normalizeFragment()

- Events notification (routeEntered, routeExited)

- Router.add() create instances of luga.RouteHandler by default. You can change this from options or setup()


- Integration with luga.history
  1) hash: call .resolve() passing location.hash minus #
  2) popState: call .resolve() passing document.location.pathname minus options.rootPath

- Document implication of using pushState regarding the server:
  https://github.com/flatiron/director#history-api

-------------

ROUTER:

- Enable test on Node.js

- Trigger an event if Router.resolve() is called and no matching route is fund?
  Allow a catchall callback?

-------------

FUTURE:

- In order to stay isomorphic we can't read HTTP method (Like Spring or .MET MVC)
  We can't handle HTTP headers too (other libraries don't either)
  Should we provide a mechanism for Node.js?