DOCS:

- Multiple router instances are possible (explain the implications)

- Routes priority rely on order of inclusion. Routes are processed from top to bottom, the first match win.
  If no match is found, nothing happens
- Greedy mode allows multiple routes matching (false by default)

- Integration with luga.history

-------------

ROUTER:

- Router.add(path, callback|[callback], payload) @return {luga.router.iRoute}
  Path can be only string, RegExp are not allowed
- Router.handle(fragment)

- Expose events notification (routeEnter, routeExit)

- Allows arbitrary payload to be passed along the route context
- Retrieve state object (if any, created by pushState) to be passed along the route context
- Parameters data to be passed along the route context
- As many useful data to be passed along the route context (including the route object itself?)

- Router.removeHandler(path)
- Router.removeAllHandlers() -> remove all routes

- Test different options passed to constructor

- Static utilities:
  luga.router.compilePath(path) compiles route paths into RegExp

- Use Crossroad-like syntax for paths, closer to Spring MVC and .NET MVC
  https://millermedeiros.github.io/crossroads.js/#crossroads-add_route
  Express's syntax for patterns is too ambiguous, pretty much RegExp:  http://expressjs.com/en/guide/routing.html

- In order to stay isomorphic we can't read HTTP method (Like Spring or .MET MVC)
  We can't handle HTTP headers too (other libraries don't either)

- Use Router uses luga.Route by default, make this configurable?