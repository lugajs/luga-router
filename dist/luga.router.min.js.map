{"version":3,"sources":["luga.router.min.js","luga.router.js","luga.history.js"],"names":["luga","Router","options","config","merge","extend","Notifier","this","version","namespace","pushState","history","setup","isPushStateSupported","undefined","usePushState","navigate","fragment","replace","title","historyMethod","newLocation","location","href","hash"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,ACJA,GAAA,mBAAA,MACA,KAAA,+BAGA,WACA,YAeAA,MAAAC,OAAA,SAAAC,SAEA,GAIAC,UACAH,MAAAI,MAAAD,OAAAD,SACAF,KAAAK,OAAAL,KAAAM,SAAAC,OAMAP,KAAAC,OAAAO,QAAA,WCnCA,WACA,YAQAR,MAAAS,UAAA,eAKA,IAAAN,SACAO,WAAA,EAQAV,MAAAW,QAAAC,MAAA,SAAAV,SAEA,MADAF,MAAAI,MAAAD,OAAAD,SACAC,QAQAH,KAAAW,QAAAE,qBAAA,WAEA,MAAAC,UAAAH,QAAAD,WAQAV,KAAAW,QAAAI,aAAA,WACA,MAAAZ,QAAAO,aAAA,GAAAV,KAAAW,QAAAE,0BAAA,GAgBAb,KAAAW,QAAAK,SAAA,SAAAC,SAAAf,SACA,GAAAC,SACAe,SAAA,EACAC,MAAA,GAKA,IAHAnB,KAAAI,MAAAD,OAAAD,SAGAF,KAAAW,QAAAI,kBAAA,EAAA,CACA,GAAAK,eAAA,WACAjB,QAAAe,WAAA,IACAE,cAAA,gBAEAT,QAAAS,kBAAAjB,OAAAgB,MAAAF,cAIA,IAAAd,OAAAe,WAAA,EAAA,CACA,GAAAG,aAAAC,SAAAC,KAAAL,QAAA,qBAAA,GACAI,UAAAJ,QAAAG,YAAA,IAAAJ,cAIAK,UAAAE,KAAA,IAAAP","file":"luga.router.min.js","sourcesContent":[null,"/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.Router.options\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Router class\r\n\t *\r\n\t * @param {luga.Router.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires routeChanged\r\n\t */\r\n\tluga.Router = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {}\r\n\t\t};\r\n\r\n\t\tvar config = {};\r\n\t\tluga.merge(config, options);\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.Router} */\r\n\t\tvar self = this;\r\n\t};\r\n\r\n\tluga.Router.version = \"0.1.0\";\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.history.options\r\n\t *\r\n\t * @property {boolean} pushState  Determine if we use pushState or the location hash. Default to true. If pushState is not available (like in IE9) the location hash will be used anyway\r\n\t */\r\n\r\n\tluga.namespace(\"luga.history\");\r\n\r\n\t/**\r\n\t * @type {luga.history.options}\r\n\t */\r\n\tvar config = {\r\n\t\tpushState: true\r\n\t};\r\n\r\n\t/**\r\n\t * Change current configuration\r\n\t * @param {luga.history.options} options\r\n\t * @returns {luga.history.options}\r\n\t */\r\n\tluga.history.setup = function(options){\r\n\t\tluga.merge(config, options);\r\n\t\treturn config;\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the browser supports pushState, false otherwise\r\n\t * @returns {boolean}\r\n\t */\r\n\t/* istanbul ignore next */\r\n\tluga.history.isPushStateSupported = function(){\r\n\t\t// Only IE9 should return false\r\n\t\treturn (history.pushState !== undefined);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if we should pushState, false otherwise\r\n\t * The result depend on a combination of browser capabilities and current configuration\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.history.usePushState = function(){\r\n\t\treturn ((config.pushState === true) && (luga.history.isPushStateSupported() === true));\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.history.navigate.options\r\n\t *\r\n\t * @property {boolean} replace  Determine if we add a new history entry or replace the current one\r\n\t * @property {string}  title    Title to be passed to pushState. Default to empty string. Some browser don't support this yet\r\n\t */\r\n\r\n\t/**\r\n\t * Add an entry to the browser's history or modify the current entry\r\n\t * https://developer.mozilla.org/en-US/docs/Web/API/History_API\r\n\t * @param {string} fragment\r\n\t * @param {luga.history.navigate.options} options\r\n\t */\r\n\tluga.history.navigate = function(fragment, options){\r\n\t\tvar config = {\r\n\t\t\treplace: false,\r\n\t\t\ttitle: \"\"\r\n\t\t};\r\n\t\tluga.merge(config, options);\r\n\r\n\t\t// pushState\r\n\t\tif(luga.history.usePushState() === true){\r\n\t\t\tvar historyMethod = \"pushState\";\r\n\t\t\tif(config.replace === true){\r\n\t\t\t\thistoryMethod = \"replaceState\";\r\n\t\t\t}\r\n\t\t\thistory[historyMethod]({}, config.title, fragment);\r\n\t\t}\r\n\t\t// location hash\r\n\t\telse{\r\n\t\t\tif(config.replace === true){\r\n\t\t\t\tvar newLocation = location.href.replace(/(javascript:|#).*$/, \"\");\r\n\t\t\t\tlocation.replace(newLocation  + \"#\" + fragment);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Some browsers require that location hash contains a leading #\r\n\t\t\t\tlocation.hash = \"#\" + fragment;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}