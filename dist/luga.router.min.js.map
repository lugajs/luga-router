{"version":3,"sources":["luga.router.min.js","luga.router.js","luga.router.utils.js","luga.router.Router.js","luga.router.RouteHandler.js"],"names":["luga","namespace","router","version","isValidRouteHandler","obj","type","path","enter","exit","getPayload","getParams","match","replaceTokens","pattern","regexpName","replaceName","key","TOKENS","hasOwnProperty","current","replace","extractValues","regex","values","lastIndex","exec","push","SLASHES_REGEXP","PARAMS_REGEXP","OS","rgx","save","res","RS","RQ","OQ","OR","RR","RP","OP","id","rRestore","RegExp","utils","compilePath","getParamIds","getParamValues","shift","index","input","Router","options","CONST","ERROR_MESSAGES","INVALID_ROUTE","INVALID_ADD_ARGUMENTS","DUPLICATE_ROUTE","EVENTS","ENTER","EXIT","extend","Notifier","this","config","rootPath","handlerConstructor","RouteHandler","greedy","pushState","merge","self","routeHandlers","currentFragment","undefined","currentHandlers","add","enterCallBack","exitCallBack","payload","arguments","length","addHandler","enterCallBacks","exitCallBacks","isArray","handler","route","getByPath","string","format","getAll","i","getMatch","fragment","filter","element","array","normalizeFragment","inputString","normalizeHash","substring","remove","indexOf","splice","removeAll","resolve","matches","handlers","forEach","collection","context","assembleContext","notifyObservers","params","historyState","setup","start","window","addEventListener","onHashChange","onPopstate","stop","removeEventListener","location","hash","event","document","pathname","state","INVALID_PATH_REGEXP","compiledPath","paramsId","apply","ret","test"],"mappings":"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","file":"luga.router.min.js","sourcesContent":[null,"/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {object} luga.router.IRouteHandler\r\n *\r\n * @property {string} path\r\n * @property {function} enter\r\n * @property {function} exit\r\n * @property {function} getPayload\r\n * @property {function} getParams\r\n * @property {function} match\r\n */\r\n\r\n/**\r\n * @typedef {object} luga.router.routeContext\r\n *\r\n * @property {string} fragment                Route fragment. Required\r\n * @property {string} path                    Route path. Required\r\n * @property {object} params                  Object containing an entry for each param and the relevant values extracted from the fragment\r\n * @property {object|undefined} payload       Payload associated with the current IRouteHandler. Optional\r\n * @property {object|undefined} historyState  Object associated with a popstate event. Optional\r\n *                                            https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.router\");\r\n\tluga.router.version = \"0.1.0\";\r\n\r\n\t/**\r\n\t * Return true if the given object implements the luga.router.IRouteHandler interface. False otherwise\r\n\t * @param {*} obj\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.router.isValidRouteHandler = function(obj){\r\n\t\tif(luga.type(obj) === \"object\"){\r\n\t\t\tif((luga.type(obj.path) === \"string\") &&\r\n\t\t\t\t(luga.type(obj.enter) === \"function\") &&\r\n\t\t\t\t(luga.type(obj.exit) === \"function\") &&\r\n\t\t\t\t(luga.type(obj.getPayload) === \"function\") &&\r\n\t\t\t\t(luga.type(obj.getParams) === \"function\") &&\r\n\t\t\t\t(luga.type(obj.match) === \"function\")){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.router.utils\");\r\n\r\n\t/*\r\n\t Lovingly adapted from Crossroads.js\r\n\t https://millermedeiros.github.io/crossroads.js/\r\n\t */\r\n\r\n\t// Leading and trailing slashes\r\n\tvar SLASHES_REGEXP = /^\\/|\\/$/g;\r\n\r\n\t// Params:  everything between \"{ }\" or \": :\"\r\n\tvar PARAMS_REGEXP = /(?:\\{|:)([^}:]+)(?:\\}|:)/g;\r\n\r\n\t// Save params during compile (avoid escaping things that shouldn't be escaped)\r\n\tvar TOKENS = {\r\n\t\tOS: {\r\n\t\t\t// Optional slashes\r\n\t\t\t// Slash between \"::\" or \"}:\" or \"\\w:\" or \":{?\" or \"}{?\" or \"\\w{?\"\r\n\t\t\trgx: /([:}]|\\w(?=\\/))\\/?(:|(?:\\{\\?))/g,\r\n\t\t\tsave: \"$1{{id}}$2\",\r\n\t\t\tres: \"\\\\/?\"\r\n\t\t},\r\n\t\tRS: {\r\n\t\t\t// Required slashes\r\n\t\t\t// Used to insert slash between \":{\" and \"}{\"\r\n\t\t\trgx: /([:}])\\/?(\\{)/g,\r\n\t\t\tsave: \"$1{{id}}$2\",\r\n\t\t\tres: \"\\\\/\"\r\n\t\t},\r\n\t\tRQ: {\r\n\t\t\t// Required query string: everything in between \"{? }\"\r\n\t\t\trgx: /\\{\\?([^}]+)\\}/g,\r\n\t\t\t// Everything from \"?\" till \"#\" or end of string\r\n\t\t\tres: \"\\\\?([^#]+)\"\r\n\t\t},\r\n\t\tOQ: {\r\n\t\t\t// Optional query string: everything in between \":? :\"\r\n\t\t\trgx: /:\\?([^:]+):/g,\r\n\t\t\t// Everything from \"?\" till \"#\" or end of string\r\n\t\t\tres: \"(?:\\\\?([^#]*))?\"\r\n\t\t},\r\n\t\tOR: {\r\n\t\t\t// Optional rest: everything in between \": *:\"\r\n\t\t\trgx: /:([^:]+)\\*:/g,\r\n\t\t\tres: \"(.*)?\" // Optional group to avoid passing empty string as captured\r\n\t\t},\r\n\t\tRR: {\r\n\t\t\t// Rest param: everything in between \"{ *}\"\r\n\t\t\trgx: /\\{([^}]+)\\*\\}/g,\r\n\t\t\tres: \"(.+)\"\r\n\t\t},\r\n\t\t// Required/optional params should come after rest segments\r\n\t\tRP: {\r\n\t\t\t// Required params: everything between \"{ }\"\r\n\t\t\trgx: /\\{([^}]+)\\}/g,\r\n\t\t\tres: \"([^\\\\/?]+)\"\r\n\t\t},\r\n\t\tOP: {\r\n\t\t\t// Optional params: everything between \": :\"\r\n\t\t\trgx: /:([^:]+):/g,\r\n\t\t\tres: \"([^\\\\/?]+)?\\/?\"\r\n\t\t}\r\n\t};\r\n\r\n\tfor(var key in TOKENS){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(TOKENS.hasOwnProperty(key) === true){\r\n\t\t\tvar current = TOKENS[key];\r\n\t\t\tcurrent.id = \"__CR_\" + key + \"__\";\r\n\t\t\tcurrent.save = (\"save\" in current) ? current.save.replace(\"{{id}}\", current.id) : current.id;\r\n\t\t\tcurrent.rRestore = new RegExp(current.id, \"g\");\r\n\t\t}\r\n\t}\r\n\r\n\tfunction replaceTokens(pattern, regexpName, replaceName){\r\n\t\tfor(var key in TOKENS){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(TOKENS.hasOwnProperty(key) === true){\r\n\t\t\t\tvar current = TOKENS[key];\r\n\t\t\t\tpattern = pattern.replace(current[regexpName], current[replaceName]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn pattern;\r\n\t}\r\n\r\n\t/**\r\n\t * Turn a path into a regular expression\r\n\t * @param {string} path\r\n\t * @returns {regExp}\r\n\t */\r\n\tluga.router.utils.compilePath = function(path){\r\n\r\n\t\t// Remove leading and trailing slashes, if any\r\n\t\tvar pattern = path.replace(SLASHES_REGEXP, \"\");\r\n\r\n\t\t// Save tokens\r\n\t\tpattern = replaceTokens(pattern, \"rgx\", \"save\");\r\n\t\t// Restore tokens\r\n\t\tpattern = replaceTokens(pattern, \"rRestore\", \"res\");\r\n\r\n\t\t// Add optional leading and trailing slashes\r\n\t\tpattern = \"\\\\/?\" + pattern + \"\\\\/?\";\r\n\r\n\t\treturn new RegExp(\"^\" + pattern + \"$\");\r\n\t};\r\n\r\n\t/**\r\n\t * Extract matching values out of a given path using a specified RegExp\r\n\t * @param {regExp} regex\r\n\t * @param  {string} path\r\n\t * @returns {array}\r\n\t */\r\n\tfunction extractValues(regex, path){\r\n\t\tvar values = [];\r\n\t\tvar match;\r\n\t\t// Reset lastIndex since RegExp can have \"g\" flag thus multiple runs might affect the result\r\n\t\tregex.lastIndex = 0;\r\n\t\twhile((match = regex.exec(path)) !== null){\r\n\t\t\tvalues.push(match[1]);\r\n\t\t}\r\n\t\treturn values;\r\n\t}\r\n\r\n\t/**\r\n\t * Extract an array of id out of a given path\r\n\t * @param {string} path\r\n\t * @returns {array}\r\n\t */\r\n\tluga.router.utils.getParamIds = function(path){\r\n\t\treturn extractValues(PARAMS_REGEXP, path);\r\n\t};\r\n\r\n\t/**\r\n\t * Extract an array of values out of a given path using a RegExp\r\n\t * @param {string} path\r\n\t * @param {regExp} regex\r\n\t * @returns {array}\r\n\t */\r\n\tluga.router.utils.getParamValues = function(path, regex){\r\n\t\tvar values = regex.exec(path);\r\n\t\t/* istanbul ignore else */\r\n\t\tif(values !== null){\r\n\t\t\t// We want a plain vanilla array, normalize the result object\r\n\t\t\tvalues.shift();\r\n\t\t\tdelete values.index;\r\n\t\t\tdelete values.input;\r\n\t\t}\r\n\t\treturn values;\r\n\t};\r\n\r\n}());","/**\r\n * @typedef {object} luga.router.options\r\n *\r\n * @property {string} rootPath                 Default to empty string\r\n * @property {function} handlerConstructor     Constructor of routeHandler class. Must implement IRouteHandler. Default to luga.router.RouteHandler\r\n * @property {boolean} greedy                  Set it to true to allow multiple routes matching. Default to false\r\n * @property {boolean} pushState               Set it to true if you want to list to window.popstate. Default to false and listen to window.hashchange instead\r\n */\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Router class\r\n\t * @param options {luga.router.options}\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires routeEntered\r\n\t * @fires routeExited\r\n\t */\r\n\tluga.router.Router = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_ROUTE: \"luga.router.Router: Invalid route passed to .add() method\",\r\n\t\t\t\tINVALID_ADD_ARGUMENTS: \"luga.router.Router: Invalid arguments passed to .add() method\",\r\n\t\t\t\tDUPLICATE_ROUTE: \"luga.router.Router: Duplicate route, path {0} already specified\"\r\n\t\t\t},\r\n\t\t\tEVENTS: {\r\n\t\t\t\tENTER: \"routeEntered\",\r\n\t\t\t\tEXIT: \"routeExited\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/**\r\n\t\t * @type {luga.router.options}\r\n\t\t */\r\n\t\tvar config = {\r\n\t\t\trootPath: \"\",\r\n\t\t\thandlerConstructor: luga.router.RouteHandler,\r\n\t\t\tgreedy: false,\r\n\t\t\tpushState: false\r\n\t\t};\r\n\r\n\t\tluga.merge(config, options);\r\n\r\n\t\t/** @type {luga.router.Router} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {array.<luga.router.IRouteHandler>} */\r\n\t\tvar routeHandlers = [];\r\n\r\n\t\t/** @type {string|undefined} */\r\n\t\tvar currentFragment = undefined;\r\n\r\n\t\t/** @type {array.<luga.router.IRouteHandler>} */\r\n\t\tvar currentHandlers = [];\r\n\r\n\t\t/**\r\n\t\t * Add a Route. It can be invoked with two different sets of arguments:\r\n\t\t * 1) Only one single Route object:\r\n\t\t * ex: Router.add({luga.router.IRouteHandler})\r\n\t\t *\r\n\t\t *\r\n\t\t * @param {string|luga.router.IRouteHandler} path     Either a Route object or a path expressed as string. Required\r\n\t\t * @param {function|array.<function>} enterCallBack   Either a single callBack function or an array of functions to be invoked before entering the route. Optional\r\n\t\t * @param {function|array.<function>} exitCallBack    Either a single callBack function or an array of functions to be invoked before leaving the route. Optional\r\n\t\t * @param {object} payload                            A payload object to be passed to the callBacks. Optional\r\n\t\t */\r\n\t\tthis.add = function(path, enterCallBack, exitCallBack, payload){\r\n\t\t\tif(arguments.length === 1){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif((luga.type(arguments[0]) !== \"string\") && (luga.type(arguments[0]) !== \"object\")){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ADD_ARGUMENTS);\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(luga.type(arguments[0]) === \"object\"){\r\n\t\t\t\t\tif(luga.router.isValidRouteHandler(arguments[0]) !== true){\r\n\t\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROUTE);\r\n\t\t\t\t\t}\r\n\t\t\t\t\taddHandler(arguments[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif((arguments.length > 1) && (luga.router.isValidRouteHandler(arguments[0]) === true)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ADD_ARGUMENTS);\r\n\t\t\t}\r\n\t\t\tif((arguments.length > 0) && (luga.type(arguments[0]) === \"string\")){\r\n\t\t\t\tvar options = {\r\n\t\t\t\t\tpath: path,\r\n\t\t\t\t\tenterCallBacks: [],\r\n\t\t\t\t\texitCallBacks: [],\r\n\t\t\t\t\tpayload: payload\r\n\t\t\t\t};\r\n\t\t\t\tif(luga.isArray(enterCallBack) === true){\r\n\t\t\t\t\toptions.enterCallBacks = enterCallBack;\r\n\t\t\t\t}\r\n\t\t\t\tif(luga.type(enterCallBack) === \"function\"){\r\n\t\t\t\t\toptions.enterCallBacks = [enterCallBack];\r\n\t\t\t\t}\r\n\t\t\t\tif(luga.isArray(exitCallBack) === true){\r\n\t\t\t\t\toptions.exitCallBacks = exitCallBack;\r\n\t\t\t\t}\r\n\t\t\t\tif(luga.type(exitCallBack) === \"function\"){\r\n\t\t\t\t\toptions.exitCallBacks = [exitCallBack];\r\n\t\t\t\t}\r\n\t\t\t\tvar handler = new config.handlerConstructor(options);\r\n\t\t\t\taddHandler(handler);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t *\r\n\t\t * @param {luga.router.IRouteHandler} route\r\n\t\t */\r\n\t\tvar addHandler = function(route){\r\n\t\t\tif(self.getByPath(route.path) !== undefined){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.DUPLICATE_ROUTE, [route.path]));\r\n\t\t\t}\r\n\t\t\trouteHandlers.push(route);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return all the available route objects\r\n\t\t * @returns {array.<luga.router.IRouteHandler>}\r\n\t\t */\r\n\t\tthis.getAll = function(){\r\n\t\t\treturn routeHandlers;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return a registered route object associated with the given path\r\n\t\t * Return undefined if none is fund\r\n\t\t * @param {string} path\r\n\t\t * @returns {luga.router.IRouteHandler|undefined}\r\n\t\t */\r\n\t\tthis.getByPath = function(path){\r\n\t\t\tfor(var i = 0; i < routeHandlers.length; i++){\r\n\t\t\t\tif(routeHandlers[i].path === path){\r\n\t\t\t\t\treturn routeHandlers[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * If options.greedy is false either:\r\n\t\t * 1) Return a registered routeHandler object matching the given fragment\r\n\t\t * 2) Return undefined if none is fund\r\n\t\t *\r\n\t\t * If options.greedy is true either:\r\n\t\t * 1) Return an array of matching routeHandler objects if options.greedy is true\r\n\t\t * 2) Return an empty array if none is fund\r\n\t\t *\r\n\t\t * @param {string} fragment\r\n\t\t * @returns {luga.router.IRouteHandler|undefined|array.<luga.router.IRouteHandler>}\r\n\t\t */\r\n\t\tthis.getMatch = function(fragment){\r\n\t\t\tif(config.greedy === false){\r\n\t\t\t\tfor(var i = 0; i < routeHandlers.length; i++){\r\n\t\t\t\t\tif(routeHandlers[i].match(fragment) === true){\r\n\t\t\t\t\t\treturn routeHandlers[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn routeHandlers.filter(function(element, index, array){\r\n\t\t\t\t\treturn element.match(fragment) === true;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Remove the rootPath in front of the given string\r\n\t\t * @param {string} inputString\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.normalizeFragment = function(inputString){\r\n\t\t\tvar pattern = new RegExp(\"^\\/?\" + config.rootPath);\r\n\t\t\treturn inputString.replace(pattern, \"\");\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Remove any '#' and/or '!' in front of the given string\r\n\t\t * @param {string} inputString\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.normalizeHash = function(inputString){\r\n\t\t\tif(inputString[0] === \"#\"){\r\n\t\t\t\tinputString = inputString.substring(1);\r\n\t\t\t}\r\n\t\t\tif(inputString[0] === \"!\"){\r\n\t\t\t\tinputString = inputString.substring(1);\r\n\t\t\t}\r\n\t\t\treturn self.normalizeFragment(inputString);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Remove the routeHandler matching the given path\r\n\t\t * Fails silently if the given path does not match any routeHandler\r\n\t\t * @param {string} path\r\n\t\t */\r\n\t\tthis.remove = function(path){\r\n\t\t\tvar index = routeHandlers.indexOf(self.getByPath(path));\r\n\t\t\tif(index !== -1){\r\n\t\t\t\trouteHandlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Remove all routeHandlers\r\n\t\t */\r\n\t\tthis.removeAll = function(){\r\n\t\t\trouteHandlers = [];\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * If options.greedy is false either fails silently if no match is fund or:\r\n\t\t * 1) Call the exit() method of the previously matched routeHandler\r\n\t\t * 2) Call the enter() method of the first registered routeHandler matching the given fragment\r\n\t\t *\r\n\t\t * If options.greedy is true either fails silently if no match is fund or:\r\n\t\t * 1) Call the exit() method of the previously matched routeHandlers\r\n\t\t * 2) Call the enter() method of all the registered routeHandlers matching the given fragment\r\n\t\t *\r\n\t\t * @param {string} fragment\r\n\t\t * @param {object} options.state\r\n\t\t * @returns {boolean} True if at least one routeHandler was resolved, false otherwise\r\n\t\t */\r\n\t\tthis.resolve = function(fragment, options){\r\n\t\t\tvar matches = self.getMatch(fragment);\r\n\t\t\tif(matches === undefined){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Single match\r\n\t\t\tif(luga.isArray(matches) === false){\r\n\t\t\t\tmatches = [matches];\r\n\t\t\t}\r\n\t\t\texit(options);\r\n\t\t\tenter(matches, fragment, options);\r\n\t\t\treturn matches.length > 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Overwrite the current handlers with the given ones\r\n\t\t * Then execute the enter() method on each of them\r\n\t\t * Finally: triggers a 'routeEntered' notification\r\n\t\t * @param {array.<luga.router.IRouteHandler>} handlers\r\n\t\t * @param {string} fragment\r\n\t\t * @param {object} options.state\r\n\t\t */\r\n\t\tvar enter = function(handlers, fragment, options){\r\n\t\t\tcurrentHandlers = handlers;\r\n\t\t\tcurrentFragment = fragment;\r\n\t\t\tcurrentHandlers.forEach(function(element, i, collection){\r\n\t\t\t\tvar context = assembleContext(element, fragment, options);\r\n\t\t\t\telement.enter(context);\r\n\t\t\t\tself.notifyObservers(CONST.EVENTS.ENTER, context);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute the exit() method on all the current handlers\r\n\t\t * @param {object} options.state\r\n\t\t */\r\n\t\tvar exit = function(){\r\n\t\t\tcurrentHandlers.forEach(function(element, i, collection){\r\n\t\t\t\tvar context = assembleContext(element, currentFragment, options);\r\n\t\t\t\telement.exit(context);\r\n\t\t\t\tself.notifyObservers(CONST.EVENTS.EXIT, {});\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Assemble a route context\r\n\t\t * @param {luga.router.IRouteHandler} handler\r\n\t\t * @param {string} fragment\r\n\t\t * @param {object} options\r\n\t\t * @returns {luga.router.routeContext}\r\n\t\t */\r\n\t\tvar assembleContext = function(handler, fragment, options){\r\n\t\t\t/** @type {luga.router.routeContext} */\r\n\t\t\tvar context = {\r\n\t\t\t\tfragment: fragment,\r\n\t\t\t\tpath: handler.path,\r\n\t\t\t\tpayload: handler.getPayload(),\r\n\t\t\t\tparams: handler.getParams(fragment),\r\n\t\t\t\thistoryState: undefined\r\n\t\t\t};\r\n\r\n\t\t\tluga.merge(context, options);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Change current configuration\r\n\t\t * @param {luga.router.options} options\r\n\t\t * @returns {luga.router.options}\r\n\t\t */\r\n\t\tthis.setup = function(options){\r\n\t\t\tluga.merge(config, options);\r\n\t\t\treturn config;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Bootstrap the Router\r\n\t\t * If inside a browser, start listening to the \"hashchange\" and \"popstate\" events\r\n\t\t */\r\n\t\tthis.start = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(window !== undefined){\r\n\t\t\t\tif(config.pushState === false){\r\n\t\t\t\t\twindow.addEventListener(\"hashchange\", self.onHashChange, false);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\twindow.addEventListener(\"popstate\", self.onPopstate, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Stop the Router\r\n\t\t * If inside a browser, stop listening to the \"hashchange\" and \"popstate\" events\r\n\t\t */\r\n\t\tthis.stop = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(window !== undefined){\r\n\t\t\t\tif(config.pushState === false){\r\n\t\t\t\t\twindow.removeEventListener(\"hashchange\", self.onHashChange, false);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\twindow.removeEventListener(\"popstate\", self.onPopstate, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Handle a hashchange event\r\n\t\t * https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent\r\n\t\t */\r\n\t\tthis.onHashChange = function(){\r\n\t\t\tself.resolve(self.normalizeHash(location.hash));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Handle a popstate event\r\n\t\t * https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\r\n\t\t * @param {event} event\r\n\t\t */\r\n\t\tthis.onPopstate = function(event){\r\n\t\t\tvar fragment = self.normalizeFragment(document.location.pathname);\r\n\t\t\tself.resolve(fragment, {historyState: event.state});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","/**\r\n * @typedef {object} luga.router.IRouteHandler.options\r\n *\r\n * @property {string}           path              Path. Required\r\n * @property {array.<function>} enterCallBacks    Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n * @property {array.<function>} exitCallBacks     formatter  A formatting functions to be called once for each row in the dataSet. Default to null\r\n * @property {object} payload\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Route class\r\n\t * @param options {luga.router.IRouteHandler.options}\r\n\t * @constructor\r\n\t * @extends luga.router.IRouteHandler\r\n\t */\r\n\tluga.router.RouteHandler = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_PATH_REGEXP: \"luga.router.RouteHandler: Invalid path. You must use strings, RegExp are not allowed\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @type {luga.router.IRouteHandler.options}\r\n\t\t */\r\n\t\tvar config = {\r\n\t\t\tpath: \"\",\r\n\t\t\tenterCallBacks: [],\r\n\t\t\texitCallBacks: [],\r\n\t\t\tpayload: undefined\r\n\t\t};\r\n\r\n\t\tluga.merge(config, options);\r\n\t\tif(luga.type(config.enterCallBacks) === \"function\"){\r\n\t\t\tconfig.enterCallBacks = [config.enterCallBacks];\r\n\t\t}\r\n\t\tif(luga.type(config.exitCallBacks) === \"function\"){\r\n\t\t\tconfig.exitCallBacks = [config.exitCallBacks];\r\n\t\t}\r\n\r\n\t\tif(luga.type(config.path) === \"regexp\"){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PATH_REGEXP);\r\n\t\t}\r\n\r\n\t\tthis.path = config.path;\r\n\r\n\t\t/** @type {regExp} */\r\n\t\tvar compiledPath = luga.router.utils.compilePath(this.path);\r\n\r\n\t\t/** @type {array} */\r\n\t\tvar paramsId = luga.router.utils.getParamIds(this.path);\r\n\r\n\t\t/**\r\n\t\t * Execute registered enter callbacks, if any\r\n\t\t * @param {luga.router.routeContext} context\r\n\t\t */\r\n\t\tthis.enter = function(context){\r\n\t\t\tconfig.enterCallBacks.forEach(function(element, i, collection){\r\n\t\t\t\telement.apply(null, [context]);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute registered exit callbacks, if any\r\n\t\t */\r\n\t\tthis.exit = function(){\r\n\t\t\tconfig.exitCallBacks.forEach(function(element, i, collection){\r\n\t\t\t\telement.apply(null, []);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return containing an entry for each param and the relevant values extracted from the fragment\r\n\t\t * @param {string} fragment\r\n\t\t * @returns {object}\r\n\t\t */\r\n\t\tthis.getParams = function(fragment){\r\n\t\t\tvar ret = {};\r\n\t\t\tvar values = luga.router.utils.getParamValues(fragment, compiledPath);\r\n\t\t\t// Merge the two parallel arrays\r\n\t\t\tparamsId.forEach(function(element, i, collection){\r\n\t\t\t\tret[element] = values[i];\r\n\t\t\t});\r\n\t\t\treturn ret;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the handler payload, if any\r\n\t\t * Return undefined if no payload is associated with the handler\r\n\t\t * @returns {luga.router.routeContext|undefined}\r\n\t\t */\r\n\t\tthis.getPayload = function(){\r\n\t\t\treturn config.payload;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return true if the given fragment matches the Route. False otherwise\r\n\t\t * @param fragment\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.match = function(fragment){\r\n\t\t\treturn compiledPath.test(fragment);\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}