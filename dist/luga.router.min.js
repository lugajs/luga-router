/*! 
luga-router 0.5.1 2018-02-10T14:11:34.925Z
Copyright 2015-2018 Massimo Foti (massimo@massimocorner.com)
Licensed under the Apache License, Version 2.0 | http://www.apache.org/licenses/LICENSE-2.0
 */
if("undefined"==typeof luga)throw"Unable to find Luga JS Core";!function(){"use strict";luga.namespace("luga.router"),luga.router.version="0.5.1",luga.router.isValidRouteHandler=function(obj){return"object"===luga.type(obj)&&"string"===luga.type(obj.path)&&"function"===luga.type(obj.enter)&&"function"===luga.type(obj.exit)&&"function"===luga.type(obj.getPayload)&&"function"===luga.type(obj.getParams)&&"function"===luga.type(obj.match)}}(),function(){"use strict";luga.namespace("luga.router.utils");var SLASHES_REGEXP=/^\/|\/$/g,PARAMS_REGEXP=/(?:\{|:)([^}:]+)(?:\}|:)/g,TOKENS={OS:{rgx:/([:}]|\w(?=\/))\/?(:|(?:\{\?))/g,save:"$1{{id}}$2",res:"\\/?"},RS:{rgx:/([:}])\/?(\{)/g,save:"$1{{id}}$2",res:"\\/"},RQ:{rgx:/\{\?([^}]+)\}/g,res:"\\?([^#]+)"},OQ:{rgx:/:\?([^:]+):/g,res:"(?:\\?([^#]*))?"},OR:{rgx:/:([^:]+)\*:/g,res:"(.*)?"},RR:{rgx:/\{([^}]+)\*\}/g,res:"(.+)"},RP:{rgx:/\{([^}]+)\}/g,res:"([^\\/?]+)"},OP:{rgx:/:([^:]+):/g,res:"([^\\/?]+)?/?"}};for(var key in TOKENS)if(!0===TOKENS.hasOwnProperty(key)){var current=TOKENS[key];current.id="__LUGA_"+key+"__",current.save="save"in current?current.save.replace("{{id}}",current.id):current.id,current.rRestore=new RegExp(current.id,"g")}function replaceTokens(pattern,regexpName,replaceName){for(var key in TOKENS)if(!0===TOKENS.hasOwnProperty(key)){var current=TOKENS[key];pattern=pattern.replace(current[regexpName],current[replaceName])}return pattern}luga.router.utils.compilePath=function(path){var pattern=path.replace(SLASHES_REGEXP,"");return pattern="\\/?"+(pattern=replaceTokens(pattern=replaceTokens(pattern,"rgx","save"),"rRestore","res"))+"\\/?",new RegExp("^"+pattern+"$")},luga.router.utils.getParamIds=function(path){return function(regex,path){var match,values=[];for(regex.lastIndex=0;null!==(match=regex.exec(path));)values.push(match[1]);return values}(PARAMS_REGEXP,path)},luga.router.utils.getParamValues=function(fragment,regex){var values=regex.exec(fragment);return null!==values&&(values.shift(),delete values.index,delete values.input),values}}(),function(){"use strict";luga.router.Router=function(options){var CONST_ERROR_MESSAGES={INVALID_ROUTE:"luga.router.Router: Invalid route passed to .add() method",INVALID_ADD_ARGUMENTS:"luga.router.Router: Invalid arguments passed to .add() method",DUPLICATE_ROUTE:"luga.router.Router: Duplicate route, path {0} already specified"},CONST_EVENTS={ENTER:"routeEntered",EXIT:"routeExited"};luga.extend(luga.Notifier,this);var config={rootPath:"",handlerConstructor:luga.router.RouteHandler,greedy:!1,pushState:!1};luga.merge(config,options);var currentFragment,self=this,routeHandlers=[],currentHandlers=[];this.add=function(path,enterCallBack,exitCallBack,payload){if(1===arguments.length){if("string"!==luga.type(arguments[0])&&"object"!==luga.type(arguments[0]))throw CONST_ERROR_MESSAGES.INVALID_ADD_ARGUMENTS;if("object"===luga.type(arguments[0])){if(!0!==luga.router.isValidRouteHandler(arguments[0]))throw CONST_ERROR_MESSAGES.INVALID_ROUTE;addHandler(arguments[0])}}if(arguments.length>1&&!0===luga.router.isValidRouteHandler(arguments[0]))throw CONST_ERROR_MESSAGES.INVALID_ADD_ARGUMENTS;if(arguments.length>0&&"string"===luga.type(arguments[0])){var options={path:path,enterCallBacks:[],exitCallBacks:[],payload:payload};!0===luga.isArray(enterCallBack)&&(options.enterCallBacks=enterCallBack),"function"===luga.type(enterCallBack)&&(options.enterCallBacks=[enterCallBack]),!0===luga.isArray(exitCallBack)&&(options.exitCallBacks=exitCallBack),"function"===luga.type(exitCallBack)&&(options.exitCallBacks=[exitCallBack]);var handler=new config.handlerConstructor(options);addHandler(handler)}};var addHandler=function(route){if(void 0!==self.getByPath(route.path))throw luga.string.format(CONST_ERROR_MESSAGES.DUPLICATE_ROUTE,[route.path]);routeHandlers.push(route)};this.getAll=function(){return routeHandlers},this.getByPath=function(path){for(var i=0;i<routeHandlers.length;i++)if(routeHandlers[i].path===path)return routeHandlers[i]},this.getMatch=function(fragment){if(!1!==config.greedy)return routeHandlers.filter(function(element,index,array){return!0===element.match(fragment)});for(var i=0;i<routeHandlers.length;i++)if(!0===routeHandlers[i].match(fragment))return routeHandlers[i]},this.normalizeFragment=function(inputString){-1!==inputString.indexOf("?")&&(inputString=inputString.substring(0,inputString.indexOf("?")));var pattern=new RegExp("^/?"+config.rootPath);return inputString.replace(pattern,"")},this.normalizeHash=function(inputString){return"#"===inputString[0]&&(inputString=inputString.substring(1)),"!"===inputString[0]&&(inputString=inputString.substring(1)),self.normalizeFragment(inputString)},this.remove=function(path){var index=routeHandlers.indexOf(self.getByPath(path));-1!==index&&routeHandlers.splice(index,1)},this.removeAll=function(){routeHandlers=[]},this.resolve=function(fragment,options){var matches=self.getMatch(fragment);return void 0!==matches&&(!1===luga.isArray(matches)&&(matches=[matches]),exit(options),enter(matches,fragment,options),matches.length>0)};var enter=function(handlers,fragment,options){currentFragment=fragment,(currentHandlers=handlers).forEach(function(element,i,collection){var context=assembleContext(element,fragment,options);element.enter(context),self.notifyObservers(CONST_EVENTS.ENTER,context)})},exit=function(){currentHandlers.forEach(function(element,i,collection){var context=assembleContext(element,currentFragment,options);element.exit(context),self.notifyObservers(CONST_EVENTS.EXIT,{})})},assembleContext=function(handler,fragment,options){var context={fragment:fragment,path:handler.path,payload:handler.getPayload(),params:handler.getParams(fragment),historyState:void 0};return luga.merge(context,options),context};this.setup=function(options){return luga.merge(config,options),config},this.start=function(){void 0!==window&&(!1===config.pushState?window.addEventListener("hashchange",self.onHashChange,!1):window.addEventListener("popstate",self.onPopstate,!1))},this.stop=function(){void 0!==window&&(!1===config.pushState?window.removeEventListener("hashchange",self.onHashChange,!1):window.removeEventListener("popstate",self.onPopstate,!1))},this.onHashChange=function(){self.resolve(self.normalizeHash(location.hash))},this.onPopstate=function(event){var fragment=self.normalizeFragment(document.location.pathname);self.resolve(fragment,{historyState:event.state})}}}(),function(){"use strict";luga.router.RouteHandler=function(options){var config={path:"",enterCallBacks:[],exitCallBacks:[],payload:void 0};if(luga.merge(config,options),"function"===luga.type(config.enterCallBacks)&&(config.enterCallBacks=[config.enterCallBacks]),"function"===luga.type(config.exitCallBacks)&&(config.exitCallBacks=[config.exitCallBacks]),"regexp"===luga.type(config.path))throw"luga.router.RouteHandler: Invalid path. You must use strings, RegExp are not allowed";this.path=config.path;var compiledPath=luga.router.utils.compilePath(this.path),paramsId=luga.router.utils.getParamIds(this.path);this.enter=function(context){config.enterCallBacks.forEach(function(element,i,collection){element.apply(null,[context])})},this.exit=function(){config.exitCallBacks.forEach(function(element,i,collection){element.apply(null,[])})},this.getParams=function(fragment){var ret={},values=luga.router.utils.getParamValues(fragment,compiledPath);return paramsId.forEach(function(element,i,collection){ret[element]=values[i]}),ret},this.getPayload=function(){return config.payload},this.match=function(fragment){return compiledPath.test(fragment)}}}(),function(){"use strict";luga.namespace("luga.history");var settings={pushState:!1};luga.history.setup=function(options){return luga.merge(settings,options),settings},luga.history.isPushStateSupported=function(){return void 0!==history.pushState},luga.history.usePushState=function(){return!0===settings.pushState&&!0===luga.history.isPushStateSupported()},luga.history.navigate=function(fragment,options){var config={replace:!1,title:"",state:{}};if(luga.merge(config,options),!0===luga.history.usePushState()){var historyMethod="pushState";!0===config.replace&&(historyMethod="replaceState"),history[historyMethod](config.state,config.title,fragment)}else if(!0===config.replace){var newLocation=location.href.replace(/(javascript:|#).*$/,"");location.replace(newLocation+"#"+fragment)}else location.hash="#"+fragment}}();
//# sourceMappingURL=luga.router.min.js.map
