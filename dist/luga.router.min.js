/*! 
luga-router 0.1.0 2016-07-24T19:13:21.465Z
Copyright 2015-2016 Massimo Foti (massimo@massimocorner.com)
Licensed under the Apache License, Version 2.0 | http://www.apache.org/licenses/LICENSE-2.0
 */
if("undefined"==typeof luga)throw"Unable to find Luga JS Core";!function(){"use strict";luga.namespace("luga.router"),luga.router.version="0.1.0",luga.router.isValidRouteHandler=function(obj){return"object"===luga.type(obj)&&"string"===luga.type(obj.path)&&"function"===luga.type(obj.enter)&&"function"===luga.type(obj.exit)&&"function"===luga.type(obj.getPayload)&&"function"===luga.type(obj.match)?!0:!1}}(),function(){"use strict";luga.router.Router=function(options){var CONST={ERROR_MESSAGES:{INVALID_ROUTE:"luga.router.Router: Invalid route passed to .add() method",DUPLICATE_ROUTE:"luga.router.Router: Duplicate route, path {0} already specified"}};luga.extend(luga.Notifier,this);var config={rootPath:"",greedy:!1};luga.merge(config,options);var self=this,routeHandlers=[],currentHandlers=[];this.add=function(path,enterCallBack,exitCallBack,payload){if(1===arguments.length&&"object"===luga.type(arguments[0])){if(luga.router.isValidRouteHandler(arguments[0])!==!0)throw CONST.ERROR_MESSAGES.INVALID_ROUTE;addHandler(arguments[0])}if(arguments.length>0&&"string"===luga.type(arguments[0])){var options={path:path,enterCallBacks:[],exitCallBacks:[],payload:payload};luga.isArray(enterCallBack)===!0&&(options.enterCallBacks=enterCallBack),"function"===luga.type(enterCallBack)&&(options.enterCallBacks=[enterCallBack]),luga.isArray(exitCallBack)===!0&&(options.exitCallBacks=exitCallBack),"function"===luga.type(exitCallBack)&&(options.exitCallBacks=[exitCallBack]);var handler=new luga.router.RouteHandler(options);addHandler(handler)}};var addHandler=function(route){if(void 0!==self.getByPath(route.path))throw luga.string.format(CONST.ERROR_MESSAGES.DUPLICATE_ROUTE,[route.path]);routeHandlers.push(route)};this.getAll=function(){return routeHandlers},this.getByPath=function(path){for(var i=0;i<routeHandlers.length;i++)if(routeHandlers[i].path===path)return routeHandlers[i]},this.getMatch=function(fragment){if(config.greedy!==!1)return routeHandlers.filter(function(element,index,array){return element.match(fragment)===!0});for(var i=0;i<routeHandlers.length;i++)if(routeHandlers[i].match(fragment)===!0)return routeHandlers[i]},this.normalizeFragment=function(inputString){var pattern=new RegExp("^/?"+config.rootPath);return inputString.replace(pattern,"")},this.normalizeHash=function(inputString){return"#"===inputString[0]&&(inputString=inputString.substring(1)),"!"===inputString[0]&&(inputString=inputString.substring(1)),self.normalizeFragment(inputString)},this.remove=function(path){var index=routeHandlers.indexOf(self.getByPath(path));-1!==index&&routeHandlers.splice(index,1)},this.removeAll=function(){routeHandlers=[]},this.resolve=function(fragment,options){var matches=self.getMatch(fragment);return void 0===matches?!1:(luga.isArray(matches)===!1&&(matches=[matches]),exit(),enter(matches,fragment,options),matches.length>0)};var enter=function(handlers,fragment,options){currentHandlers=handlers,currentHandlers.forEach(function(element,i,collection){var context=assembleContext(element,fragment,options);element.enter(context)})},exit=function(){currentHandlers.forEach(function(element,i,collection){element.exit()})},assembleContext=function(handler,fragment,options){var context={fragment:fragment};return void 0!==handler.getPayload()&&(context.payload=handler.getPayload()),luga.merge(context,options),context};this.setup=function(options){return luga.merge(config,options),config},this.start=function(){void 0!==window&&(window.addEventListener("hashchange",self.onHashChange,!1),window.addEventListener("popstate",self.onPopstate,!1))},this.stop=function(){void 0!==window&&(window.removeEventListener("hashchange",self.onHashChange,!1),window.removeEventListener("popstate",self.onPopstate,!1))},this.onHashChange=function(){self.resolve(self.normalizeHash(location.hash))},this.onPopstate=function(event){var fragment=self.normalizeFragment(document.location.pathname);self.resolve(fragment,{historyState:event.state})}}}(),function(){"use strict";luga.router.RouteHandler=function(options){var CONST={ERROR_MESSAGES:{INVALID_PATH_REGEXP:"luga.router.RouteHandler: Invalid path. You must use strings, RegExp are not allowed"}},config={path:"",enterCallBacks:[],exitCallBacks:[],payload:void 0};if(luga.merge(config,options),"regexp"===luga.type(config.path))throw CONST.ERROR_MESSAGES.INVALID_PATH_REGEXP;this.path=config.path,this.enter=function(context){config.enterCallBacks.forEach(function(element,i,collection){element.apply(context,[])})},this.exit=function(){config.exitCallBacks.forEach(function(element,i,collection){element.apply(null,[])})},this.getPayload=function(){return config.payload},this.match=function(fragment){return fragment===config.path}}}();
//# sourceMappingURL=luga.router.min.js.map
