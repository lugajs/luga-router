<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">luga.router.Router(options)</div>
	<div class="panel-body">
		<p>
			Router's constructor.
		</p>
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>options.rootPath</td>
			<td>
				{string}
			</td>
			<td>
				A base path that must be removed from the beginning of every url fragment.
				Default to empty string
			</td>
		</tr>
		<tr>
			<td>options.greedy</td>
			<td>
				{boolean}
			</td>
			<td>
				By default the router execute the first routeHandler that matches the url fragment.
				Set it to true to allow multiple routes matching. Default to false
			</td>
		</tr>
		<tr>
			<td>options.pushState</td>
			<td>
				{boolean}
			</td>
			<td>
				Set it to true if you want to list to window.popstate.
				Default to false and listen to window.hashchange instead
			</td>
		</tr>
		<tr>
			<td>options.handlerConstructor</td>
			<td>
				{function}
			</td>
			<td>
				By default every time you call the .add() method, the router create an instance of luga.router.RouteHandler.
				The job of the routeHandler is to decide if the current fragment matches the route and, if it does, create a <a href="#routehandler/route-context">route context</a>.
				If you want to use a custom/different routeHandler class/constructor, use this setting.
				The given function must implement <a href="#extensibility/iroutehandler">IRouteHandler</a>
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Examples</th>
	</table>

<pre><code class="language-javascript">var myRouter = new luga.router.Router({
	rootPath: "",
	handlerConstructor: customHandlerConstructor
});
</code></pre>

</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.add()</div>
	<div class="panel-body">
		Text here
	</div>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.getAll()</div>
	<div class="panel-body">
		Return an array containing all the registered routeHandler objects.
		Return an empty array if no routeHandler is registered
	</div>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{array.&lt;<a href="#extensibility/iroutehandler">luga.router.IRouteHandler</a>&gt;}</td>
		</tr>
	</table>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.getByPath()</div>
	<div class="panel-body">
		Return a registered routeHandler object associated with the given path.
		Return undefined if none is fund
	</div>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{<a href="#extensibility/iroutehandler">luga.router.IRouteHandler</a>|undefined}</td>
		</tr>
	</table>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.getMatch()</div>
	<div class="panel-body">
		Text here
	</div>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.normalizeFragment()</div>
	<div class="panel-body">
		Remove the rootPath in front of the given string.
		Also remove the querystring, if any
	</div>
	<div class="alert alert-info" role="alert">
		<strong>Heads up!</strong>
		<p>
			This method is not available as static utility. You can only call it on a router object.
			This is required since the result is influenced by the way the rootPath is configured inside the router
		</p>
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>inputString</td>
			<td>
				{string}
			</td>
			<td>
				The string we want to normalize
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{string}</td>
		</tr>
	</table>
<pre><code class="language-javascript">var myRouter = new luga.router.Router();
myRouter.normalizeFragment("root/page") //=> "root/page"
myRouter.normalizeFragment("root/page?id=3") //=> "root/page"

// Configure a rootPath
var routerWithRootPath = new luga.router.Router({
	rootPath: "root/"
});
routerWithRootPath.normalizeFragment("root/page") //=> "page"
</code></pre>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.normalizeHash()</div>
	<div class="panel-body">
		Remove any '#' and/or '!' in front of the given string.
		Then remove the rootPath too
	</div>
	<div class="alert alert-info" role="alert">
		<strong>Heads up!</strong>
		<p>
			This method is not available as static utility. You can only call it on a router object.
			This is required since the result is influenced by the way the rootPath is configured inside the router
		</p>
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>inputString</td>
			<td>
				{string}
			</td>
			<td>
				The string we want to normalize
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{string}</td>
		</tr>
	</table>
<pre><code class="language-javascript">var myRouter = new luga.router.Router();
myRouter.normalizeHash("#root/page") //=> "root/page"
myRouter.normalizeHash("#!root/page") //=> "root/page"

// Configure a rootPath
var routerWithRootPath = new luga.router.Router({
	rootPath: "root/"
});
routerWithRootPath.normalizeHash("#root/page") //=> "page"
</code></pre>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.remove()</div>
	<div class="panel-body">
		Remove the routeHandler matching the given path.
		Fails silently if the given path does not match any routeHandler
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>path</td>
			<td>
				{string}
			</td>
			<td>
				The path we want to remove from the router
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Examples</th>
	</table>

<pre><code class="language-javascript">var myRouter = new luga.router.Router();
myRouter.add("{section}/:page:");
myRouter.add("/:page:");

myRouter.remove("/:page:");	 //=> Remove the second routeHandler
myRouter.remove("/missing"); //=> Nothing happens
</code></pre>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.removeAll()</div>
	<div class="panel-body">
		Remove all routeHandlers from the router
	</div>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.resolve()</div>
	<div class="panel-body">
		Programmatically force the router to resolve/execute the routeHandler matching the given fragment.
		If the router is configured as greedy, multiple handlers may be executed
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>fragment</td>
			<td>
				{string}
			</td>
			<td>
				The fragment we want to resolve
			</td>
		</tr>
		<tr>
			<td>options</td>
			<td>
				{object}
			</td>
			<td>
				Optional set of options that will be added to the <a href="#routehandler/route-context">route context</a>.
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{boolean} True if at least one routeHandler was resolved, false otherwise</td>
		</tr>
	</table>
<pre><code class="language-javascript">var myRouter = new luga.router.Router();
myRouter.add("{section}/:page:", function(context){
	console.debug(context.params.section); // => "mysection"
});
myRouter.resolve("mysection/mypage"); // => Returns true
</code></pre>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.setup(options)</div>
	<div class="panel-body">
		<p>
			Allows to change router's settings at run-time.
			If called without arguments, return an object containing name/value pairs reflecting the current settings
		</p>
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>options.rootPath</td>
			<td>
				{string}
			</td>
			<td>
				A base path that must be removed from the beginning of every url fragment.
				Default to empty string
			</td>
		</tr>
		<tr>
			<td>options.greedy</td>
			<td>
				{boolean}
			</td>
			<td>
				By default the router execute the first routeHandler that matches the url fragment.
				Set it to true to allow multiple routes matching. Default to false
			</td>
		</tr>
		<tr>
			<td>options.pushState</td>
			<td>
				{boolean}
			</td>
			<td>
				Set it to true if you want to list to window.popstate.
				Default to false and listen to window.hashchange instead
			</td>
		</tr>
		<tr>
			<td>options.handlerConstructor</td>
			<td>
				{function}
			</td>
			<td>
				By default every time you call the .add() method, the router create an instance of luga.router.RouteHandler.
				The job of the routeHandler is to decide if the current fragment matches the route and, if it does, create a <a href="#routehandler/route-context">route context</a>.
				If you want to use a custom/different routeHandler class/constructor, use this setting.
				The given function must implement <a href="#extensibility/iroutehandler">IRouteHandler</a>
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Examples</th>
	</table>

<pre><code class="language-javascript">var myRouter = new luga.router.Router();
myRouter.setup({
	rootPath: "",
	handlerConstructor: customHandlerConstructor
});
</code></pre>

</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.start()</div>
	<div class="panel-body">
		The router starts listening to either the "hashchange" and "popstate" events.
		By default the router listen to "hashchange", unless it's configured with pushState = true
	</div>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.stop()</div>
	<div class="panel-body">
		Stops the router from listening to the "hashchange" and "popstate" events
	</div>
</div>