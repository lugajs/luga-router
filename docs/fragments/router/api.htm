<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">luga.router.Router(options)</div>
	<div class="panel-body">
		<p>
			Router's constructor. Before you can start using it you have to:
			<ol class="luga-docs-list">
				<li>Add routes using the .add()</li>
				<li>Invoke .start()</li>
			</ol>
		</p>
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>options.rootPath</td>
			<td>
				{string}
			</td>
			<td>
				A base path that must be removed from the beginning of every url fragment.
				Default to empty string
			</td>
		</tr>
		<tr>
			<td>options.greedy</td>
			<td>
				{boolean}
			</td>
			<td>
				By default the router execute the first routeHandler that matches the url fragment.
				Set it to true to allow multiple routes matching. Default to false
			</td>
		</tr>
		<tr>
			<td>options.pushState</td>
			<td>
				{boolean}
			</td>
			<td>
				Set it to true if you want to list to <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate">window.popstate</a>.
				Default to false and listen to <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange">window.hashchange</a> instead
			</td>
		</tr>
		<tr>
			<td>options.handlerConstructor</td>
			<td>
				{function}
			</td>
			<td>
				By default every time you call the .add() method, the router create an instance of luga.router.RouteHandler.
				The job of the routeHandler is to decide if the current fragment matches the route and, if it does, create a <a href="#routehandler/route-context">route context</a>.
				If you want to use a custom/different routeHandler class/constructor, use this setting.
				The given function must implement <a href="#extensibility/iroutehandler">IRouteHandler</a>
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Examples</th>
	</table>
<pre><code class="language-javascript">var plainRouter = new luga.router.Router();
// Some custom config
var myRouter = new luga.router.Router({
	rootPath: "",
	handlerConstructor: customHandlerConstructor
});
</code></pre>

</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.add()</div>
	<div class="panel-body">
		Add a route. It can be invoked with two different sets of arguments:
		<ol class="luga-docs-list">
			<li>A <a href="#router/path">path</a> expressed as a string, plus additional optional arguments</li>
			<li>One routeHandler object</li>
		</ol>
	</div>
	<div class="alert alert-info" role="alert">
		<strong>Heads up!</strong>
		<p>
			The .add() method is <a href="https://en.wikipedia.org/wiki/Function_overloading">overloaded</a> and can be invoked in different ways to achieve maximun flexibility.
			Please spend some time getting familiar with all the available options
		</p>
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>path</td>
			<td>
				{string|<a href="#extensibility/iroutehandler">luga.router.IRouteHandler</a>}
			</td>
			<td>
				Either a routeHandler object or a path expressed as string. <a href="#router/path">Paths</a> can only be strings, RexExp aren't allowed. Required
			</td>
		</tr>
		<tr>
			<td>enterCallBack</td>
			<td>
				{function|array.&lt;function&gt;}
			</td>
			<td>
				Either a single callBack function or an array of functions to be invoked before entering the route. Optional
			</td>
		</tr>
		<tr>
			<td>exitCallBack</td>
			<td>
				{function|array.&lt;function&gt;}
			</td>
			<td>
				Either a single callBack function or an array of functions to be invoked before leaving the route. Optional
			</td>
		</tr>
		<tr>
			<td>payload</td>
			<td>
				{object}
			</td>
			<td>
				A payload object to be passed to the callBacks. Optional
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Examples</th>
	</table>
<pre><code class="language-javascript">var myRouter = new luga.router.Router();
/**
* @param {luga.router.routeContext} context
*/
var myRouteHandler = function(context){
	console.log(context.params.section);
};
// Add some routes
var myRouter = new luga.router.Router();
myRouter.add("{section}/:page:", myRouteHandler);
myRouter.add("{section}/", myRouteHandler);
myRouter.start();
// Programmatically test the router
location.hash = "first/test"; // => log "first" inside the console
</code></pre>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.getAll()</div>
	<div class="panel-body">
		Return an array containing all the registered routeHandler objects.
		Return an empty array if no routeHandler is registered
	</div>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{array.&lt;<a href="#extensibility/iroutehandler">luga.router.IRouteHandler</a>&gt;}</td>
		</tr>
	</table>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.getByPath()</div>
	<div class="panel-body">
		Return a registered routeHandler object associated with the given path.
		Return undefined if none is fund
	</div>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{<a href="#extensibility/iroutehandler">luga.router.IRouteHandler</a>|undefined}</td>
		</tr>
	</table>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.getMatch()</div>
	<div class="panel-body">
		<p>
			If options.greedy is false:
			<ul class="luga-docs-list">
				<li>Return a registered routeHandler object matching the given fragment</li>
				<li>Return undefined if there is no match</li>
				<li>Return the first fund routeHandler object matching the given fragment, even if multiple routeHandlers match it</li>
			</ul>
		</p>
		<p>
			If options.greedy is true:
			<ul class="luga-docs-list">
				<li>Return an array of registered routeHandler objects matching the given fragment</li>
				<li>Return an empty array if there is no match</li>
			</ul>
		</p>
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>fragment</td>
			<td>
				{string}
			</td>
			<td>
				The fragment we want to resolve
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{<a href="#extensibility/iroutehandler">luga.router.IRouteHandler</a>|undefined|array.&lt;<a href="#extensibility/iroutehandler">luga.router.IRouteHandler</a>&gt;}</td>
		</tr>
	</table>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.normalizeFragment()</div>
	<div class="panel-body">
		Remove the rootPath in front of the given string.
		Also remove the querystring, if any
	</div>
	<div class="alert alert-info" role="alert">
		<strong>Heads up!</strong>
		<p>
			This method is not available as static utility. You can only call it on a router object.
			This is required since the result is influenced by the way the rootPath is configured inside the router
		</p>
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>inputString</td>
			<td>
				{string}
			</td>
			<td>
				The string we want to normalize
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{string}</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Examples</th>
	</table>
<pre><code class="language-javascript">var myRouter = new luga.router.Router();
myRouter.normalizeFragment("root/page") //=> "root/page"
myRouter.normalizeFragment("root/page?id=3") //=> "root/page"

// Configure a rootPath
var routerWithRootPath = new luga.router.Router({
	rootPath: "root/"
});
routerWithRootPath.normalizeFragment("root/page") //=> "page"
</code></pre>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.normalizeHash()</div>
	<div class="panel-body">
		Remove any '#' and/or '!' in front of the given string.
		Then remove the rootPath too
	</div>
	<div class="alert alert-info" role="alert">
		<strong>Heads up!</strong>
		<p>
			This method is not available as static utility. You can only call it on a router object.
			This is required since the result is influenced by the way the rootPath is configured inside the router
		</p>
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>inputString</td>
			<td>
				{string}
			</td>
			<td>
				The string we want to normalize
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{string}</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Examples</th>
	</table>
<pre><code class="language-javascript">var myRouter = new luga.router.Router();
myRouter.normalizeHash("#root/page") //=> "root/page"
myRouter.normalizeHash("#!root/page") //=> "root/page"

// Configure a rootPath
var routerWithRootPath = new luga.router.Router({
	rootPath: "root/"
});
routerWithRootPath.normalizeHash("#root/page") //=> "page"
</code></pre>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.remove()</div>
	<div class="panel-body">
		Remove the routeHandler matching the given path.
		Fails silently if the given path does not match any routeHandler
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>path</td>
			<td>
				{string}
			</td>
			<td>
				The path we want to remove from the router
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Examples</th>
	</table>
<pre><code class="language-javascript">var myRouter = new luga.router.Router();
myRouter.add("{section}/:page:");
myRouter.add("/:page:");

myRouter.remove("/:page:");	 //=> Remove the second routeHandler
myRouter.remove("/missing"); //=> Nothing happens
</code></pre>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.removeAll()</div>
	<div class="panel-body">
		Remove all routeHandlers from the router
	</div>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.resolve()</div>
	<div class="panel-body">
		Programmatically force the router to resolve/execute the routeHandler matching the given fragment.
		If the router is configured as greedy, multiple handlers may be executed
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>fragment</td>
			<td>
				{string}
			</td>
			<td>
				The fragment we want to resolve
			</td>
		</tr>
		<tr>
			<td>options</td>
			<td>
				{object}
			</td>
			<td>
				Optional set of options that will be added to the <a href="#routehandler/route-context">route context</a>.
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{boolean} True if at least one routeHandler was resolved, false otherwise</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Examples</th>
	</table>
<pre><code class="language-javascript">var myRouter = new luga.router.Router();
myRouter.add("{section}/:page:", function(context){
	console.debug(context.params.section); // => "mysection"
});
myRouter.resolve("mysection/mypage"); // => Returns true
</code></pre>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.setup(options)</div>
	<div class="panel-body">
		<p>
			Allows to change router's settings at run-time.
			If called without arguments, return an object containing name/value pairs reflecting the current settings
		</p>
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>options.rootPath</td>
			<td>
				{string}
			</td>
			<td>
				A base path that must be removed from the beginning of every url fragment.
				Default to empty string
			</td>
		</tr>
		<tr>
			<td>options.greedy</td>
			<td>
				{boolean}
			</td>
			<td>
				By default the router execute the first routeHandler that matches the url fragment.
				Set it to true to allow multiple routes matching. Default to false
			</td>
		</tr>
		<tr>
			<td>options.pushState</td>
			<td>
				{boolean}
			</td>
			<td>
				Set it to true if you want to list to window.popstate.
				Default to false and listen to window.hashchange instead
			</td>
		</tr>
		<tr>
			<td>options.handlerConstructor</td>
			<td>
				{function}
			</td>
			<td>
				By default every time you call the .add() method, the router create an instance of luga.router.RouteHandler.
				The job of the routeHandler is to decide if the current fragment matches the route and, if it does, create a <a href="#routehandler/route-context">route context</a>.
				If you want to use a custom/different routeHandler class/constructor, use this setting.
				The given function must implement <a href="#extensibility/iroutehandler">IRouteHandler</a>
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{luga.router.options}</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Examples</th>
	</table>
<pre><code class="language-javascript">var myRouter = new luga.router.Router();
myRouter.setup({
	rootPath: "",
	greedy: true
});
</code></pre>

</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.start()</div>
	<div class="panel-body">
		The router starts listening to either the <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange">window.hashchange</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate">window.popstate</a> events.
		By default the router listen to <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange">window.hashchange</a>, unless it's configured with pushState = true
	</div>
	<div class="alert alert-info" role="alert">
		<strong>Heads up!</strong>
		<p>
			You must invoke this method for your router to start working
		</p>
	</div>
</div>

<div class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.stop()</div>
	<div class="panel-body">
		Stops the router from listening to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange">window.hashchange</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate">window.popstate</a> events
	</div>
</div>