{"version":3,"sources":["jasmineMatchers.js"],"names":["window","jasmineMatchers","version","isPrimitive","actual","undefined","toBeExtensible","compare","result","pass","message","Object","isExtensible","toBeFalse","toBeFrozen","isFrozen","toBeInstanceOf","type","toBeSealed","isSealed","toBeTrue","toHaveProperty","propertyName","expectedValue","jQuery","hasProperty","toHaveReadonlyProperty","property","desc","getOwnPropertyDescriptor","writable","toMatchDuckType","duckType","matchType","key","hasOwnProperty","duckProp","actualValue","toBeChecked","is","toBeDisabled","toBeEmpty","toBeMatchedBy","selector","filter","length","toBeSelected","toBeVisible","toHaveAttr","attributeName","attr","toHaveClass","className","hasClass","toHaveCss","css","toHaveProp","prop","jasmine","getEnv","beforeEach","addMatchers"],"mappings":"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","file":"jasmineMatchers.min.js","sourcesContent":["/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n\r\n/* istanbul ignore else */\r\nif(typeof(window.jasmineMatchers) === \"undefined\"){\r\n\twindow.jasmineMatchers = {};\r\n}\r\n\r\n/**\r\n * @typedef {Object} jasmineMatchers.result\r\n *\r\n * @property {Boolean} pass\r\n * @property {String} [message]\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tjasmineMatchers.version = \"0.4\";\r\n\r\n\t/* Generic matchers */\r\n\r\n\tvar isPrimitive = function(actual){\r\n\t\t// Boolean\r\n\t\tif(actual === false || actual === true){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t// Nill\r\n\t\tif(actual === null || actual === undefined){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t// Number\r\n\t\tif(typeof actual === \"number\"){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t// String\r\n\t\tif(typeof actual === \"string\"){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tjasmineMatchers.toBeExtensible = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\t// Primitive values are not frozen in older browser (IE11 and before)\r\n\t\t\t\tif(isPrimitive(actual) === true){\r\n\t\t\t\t\tresult.pass = false;\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to be extensible\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(Object.isExtensible(actual) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to be extensible\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeFalse = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(actual === false){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to equal: false\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeFrozen = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\t// Primitive values are not frozen in older browser (IE11 and before)\r\n\t\t\t\tif(isPrimitive(actual) === true){\r\n\t\t\t\t\tresult.pass = false;\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to be frozen\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(Object.isFrozen(actual) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to be frozen\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeInstanceOf = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @param {Object} type\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, type){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(type === undefined){\r\n\t\t\t\t\tresult.message = \"Please specify the object to test against\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(actual instanceof type === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to be instanceof of: \" + type;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeSealed = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\t// Primitive values are not sealed in older browser (IE11 and before)\r\n\t\t\t\tif(isPrimitive(actual) === true){\r\n\t\t\t\t\tresult.pass = false;\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to be sealed\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(Object.isSealed(actual) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to be sealed\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeTrue = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(actual === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to equal: true\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveProperty = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @param {String} propertyName\r\n\t\t\t * @param {String} expectedValue\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, propertyName, expectedValue){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(propertyName) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the property as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(actual[propertyName] === undefined){\r\n\t\t\t\t\tresult.message = \"Property: \" + propertyName + \" not found\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(hasProperty(actual[propertyName], expectedValue) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + propertyName + \" to equal: \" + expectedValue + \" but current value is: \" + actual[propertyName];\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveReadonlyProperty = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @param {String} property\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, property){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(property) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the name of the property as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(actual, property);\r\n\t\t\t\tif(desc === undefined){\r\n\t\t\t\t\tresult.message = \"Unable to find property: \" + property;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(desc.writable === false){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tresult.message = \"Property: \" + property + \" is not readonly\";\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toMatchDuckType = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @param {Object} duckType\r\n\t\t\t * @param {Boolean} [matchType] Define if we have to compare type of property. Default to true\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, duckType, matchType){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(duckType === undefined){\r\n\t\t\t\t\tresult.message = \"Please specify an instance of a duckType\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(jQuery.type(actual) !== jQuery.type(duckType)){\r\n\t\t\t\t\tresult.message = \"Type mismatch, comparing: \" + jQuery.type(actual) + \" vs \" + jQuery.type(duckType);\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(matchType === undefined){\r\n\t\t\t\t\t// By default we check for type\r\n\t\t\t\t\tmatchType = true;\r\n\t\t\t\t}\r\n\t\t\t\tfor(var key in duckType){\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(duckType.hasOwnProperty(key) === true){\r\n\t\t\t\t\t\tvar duckProp = duckType[key];\r\n\t\t\t\t\t\tif(actual.hasOwnProperty(key) === true){\r\n\t\t\t\t\t\t\tif(matchType === true){\r\n\t\t\t\t\t\t\t\tif(jQuery.type(duckProp) !== jQuery.type(actual[key])){\r\n\t\t\t\t\t\t\t\t\tresult.pass = false;\r\n\t\t\t\t\t\t\t\t\tresult.message = \"Type of: .\" + key + \" does not match. Supposed to be: \" + jQuery.type(duckProp);\r\n\t\t\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tresult.message = \"The following duck property is missing: .\" + key;\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tresult.pass = true;\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/* jQuery-based matchers */\r\n\r\n\tvar hasProperty = function(actualValue, expectedValue){\r\n\t\tif(expectedValue === undefined){\r\n\t\t\treturn actualValue !== undefined;\r\n\t\t}\r\n\t\treturn actualValue === expectedValue;\r\n\t};\r\n\r\n\tjasmineMatchers.toBeChecked = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(actual).is(\":checked\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not checked\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeDisabled = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(actual).is(\":disabled\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not disabled\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeEmpty = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(actual).is(\":empty\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not empty\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeMatchedBy = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @param {String} selector\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, selector){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(selector) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the selector as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(jQuery(actual).filter(selector).length > 0){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element not matched by: \" + selector;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeSelected = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(actual).is(\":selected\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not selected\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeVisible = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(actual).is(\":visible\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not visible\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveAttr = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @param {String} attributeName\r\n\t\t\t * @param {String} expectedValue\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, attributeName, expectedValue){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(attributeName) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the attribute as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(hasProperty(jQuery(actual).attr(attributeName), expectedValue) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Attribute: \" + attributeName + \" does not match\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveClass = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @param {String} className\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, className){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(className) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the name of the CSS class as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(jQuery(actual).hasClass(className) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"CSS class: \" + className + \" not found\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveCss = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @param {String} propertyName\r\n\t\t\t * @param {String} expectedValue\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, propertyName, expectedValue){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(propertyName) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the CSS property as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\t// Second case is Chrome only\r\n\t\t\t\tif(jQuery(actual).css(propertyName) === \"\" || jQuery(actual).css(propertyName) === \"0px\"){\r\n\t\t\t\t\tresult.message = \"CSS property: \" + propertyName + \" not found\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(hasProperty(jQuery(actual).css(propertyName), expectedValue) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"CSS property: \" + propertyName + \" does not match\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveProp = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @param {String} propertyName\r\n\t\t\t * @param {String} expectedValue\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, propertyName, expectedValue){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(propertyName) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the property as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(hasProperty(jQuery(actual).prop(propertyName), expectedValue) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Property: \" + propertyName + \" does not match\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmine.getEnv().beforeEach(function(){\r\n\t\tjasmine.getEnv().addMatchers(jasmineMatchers);\r\n\t});\r\n\r\n}());"],"sourceRoot":"."}