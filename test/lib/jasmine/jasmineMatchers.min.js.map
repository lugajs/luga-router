{"version":3,"sources":["jasmineMatchers.js"],"names":["window","jasmineMatchers","version","isPrimitive","actual","isValidElement","element","HTMLElement","jQuery","toBeExtensible","compare","result","pass","message","Object","isExtensible","toBeFalse","toBeFrozen","isFrozen","toBeInstanceOf","type","undefined","toBeSealed","isSealed","toBeTrue","toHaveProperty","propertyName","expectedValue","hasProperty","toHaveReadonlyProperty","property","desc","getOwnPropertyDescriptor","writable","toMatchDuckType","duckType","matchType","key","hasOwnProperty","duckProp","actualValue","toBeChecked","is","toBeDisabled","toBeEmpty","toContainElement","find","length","toContainElementsMatching","selector","cardinality","matchesCount","toBeMatchedBy","filter","toBeSelected","toBeVisible","toHaveAttr","attributeName","attr","toHaveClass","className","hasClass","toHaveCss","css","toHaveProp","prop","jasmine","getEnv","beforeEach","addMatchers"],"mappings":"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","file":"jasmineMatchers.min.js","sourcesContent":["/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n\r\n/* istanbul ignore else */\r\nif(typeof(window.jasmineMatchers) === \"undefined\"){\r\n\twindow.jasmineMatchers = {};\r\n}\r\n\r\n/**\r\n * @typedef {Object} jasmineMatchers.result\r\n *\r\n * @property {Boolean} pass\r\n * @property {String} [message]\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tjasmineMatchers.version = \"0.5\";\r\n\r\n\t/* Utils */\r\n\r\n\tvar isPrimitive = function(actual){\r\n\t\t// Boolean\r\n\t\tif(actual === false || actual === true){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t// Nill\r\n\t\tif(actual === null || actual === undefined){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t// Number\r\n\t\tif(typeof actual === \"number\"){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t// String\r\n\t\tif(typeof actual === \"string\"){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {Object} element\r\n\t * @returns {boolean} True if the element is a HTMLElement or a jQuery object.\r\n\t */\r\n\tvar isValidElement = function(element) {\r\n\t\treturn element instanceof HTMLElement || element instanceof jQuery;\r\n\t};\r\n\r\n\t/* Generic matchers */\r\n\r\n\tjasmineMatchers.toBeExtensible = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\t// Primitive values are not frozen in older browser (IE11 and before)\r\n\t\t\t\tif(isPrimitive(actual) === true){\r\n\t\t\t\t\tresult.pass = false;\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to be extensible\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(Object.isExtensible(actual) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to be extensible\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeFalse = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(actual === false){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to equal: false\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeFrozen = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\t// Primitive values are not frozen in older browser (IE11 and before)\r\n\t\t\t\tif(isPrimitive(actual) === true){\r\n\t\t\t\t\tresult.pass = false;\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to be frozen\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(Object.isFrozen(actual) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to be frozen\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeInstanceOf = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @param {Object} type\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, type){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(type === undefined){\r\n\t\t\t\t\tresult.message = \"Please specify the object to test against\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(actual instanceof type === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to be instanceof of: \" + type;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeSealed = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\t// Primitive values are not sealed in older browser (IE11 and before)\r\n\t\t\t\tif(isPrimitive(actual) === true){\r\n\t\t\t\t\tresult.pass = false;\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to be sealed\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(Object.isSealed(actual) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to be sealed\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeTrue = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(actual === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + actual + \" to equal: true\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveProperty = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @param {String} propertyName\r\n\t\t\t * @param {String} expectedValue\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, propertyName, expectedValue){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(propertyName) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the property as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(actual[propertyName] === undefined){\r\n\t\t\t\t\tresult.message = \"Property: \" + propertyName + \" not found\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(hasProperty(actual[propertyName], expectedValue) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + propertyName + \" to equal: \" + expectedValue + \" but current value is: \" + actual[propertyName];\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveReadonlyProperty = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @param {String} property\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, property){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(property) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the name of the property as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(actual, property);\r\n\t\t\t\tif(desc === undefined){\r\n\t\t\t\t\tresult.message = \"Unable to find property: \" + property;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(desc.writable === false){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tresult.message = \"Property: \" + property + \" is not readonly\";\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toMatchDuckType = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @param {Object} duckType\r\n\t\t\t * @param {Boolean} [matchType] Define if we have to compare type of property. Default to true\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, duckType, matchType){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(duckType === undefined){\r\n\t\t\t\t\tresult.message = \"Please specify an instance of a duckType\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(jQuery.type(actual) !== jQuery.type(duckType)){\r\n\t\t\t\t\tresult.message = \"Type mismatch, comparing: \" + jQuery.type(actual) + \" vs \" + jQuery.type(duckType);\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(matchType === undefined){\r\n\t\t\t\t\t// By default we check for type\r\n\t\t\t\t\tmatchType = true;\r\n\t\t\t\t}\r\n\t\t\t\tfor(var key in duckType){\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(duckType.hasOwnProperty(key) === true){\r\n\t\t\t\t\t\tvar duckProp = duckType[key];\r\n\t\t\t\t\t\tif(actual.hasOwnProperty(key) === true){\r\n\t\t\t\t\t\t\tif(matchType === true){\r\n\t\t\t\t\t\t\t\tif(jQuery.type(duckProp) !== jQuery.type(actual[key])){\r\n\t\t\t\t\t\t\t\t\tresult.pass = false;\r\n\t\t\t\t\t\t\t\t\tresult.message = \"Type of: .\" + key + \" does not match. Supposed to be: \" + jQuery.type(duckProp);\r\n\t\t\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tresult.message = \"The following duck property is missing: .\" + key;\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tresult.pass = true;\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/* jQuery-based matchers */\r\n\r\n\tvar hasProperty = function(actualValue, expectedValue){\r\n\t\tif(expectedValue === undefined){\r\n\t\t\treturn actualValue !== undefined;\r\n\t\t}\r\n\t\treturn actualValue === expectedValue;\r\n\t};\r\n\r\n\tjasmineMatchers.toBeChecked = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(actual).is(\":checked\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not checked\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeDisabled = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(actual).is(\":disabled\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not disabled\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeEmpty = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(actual).is(\":empty\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not empty\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toContainElement = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery|HTMLElement} actual\r\n\t\t\t * @param {jQuery|HTMLElement} element\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, element){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(isValidElement(actual) === false){\r\n\t\t\t\t\tresult.message = \"Please specify an Element as parent\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(isValidElement(element) === false){\r\n\t\t\t\t\tresult.message = \"Please specify an Element as child\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(jQuery(actual).find(element).length > 0) {\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element \" + element + \" is not contained in \" + actual;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toContainElementsMatching = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery|HTMLElement} actual\r\n\t\t\t * @param {string} selector\r\n\t\t\t * @param {number|undefined} cardinality\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, selector, cardinality){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Validate arguments\r\n\t\t\t\tif(isValidElement(actual) === false){\r\n\t\t\t\t\tresult.message = \"Please specify an Element as container\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(jQuery.type(selector) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the selector as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(jQuery.type(cardinality) !== \"undefined\" && jQuery.type(cardinality) !== \"number\"){\r\n\t\t\t\t\tresult.message = \"Please specify the cardinality as number\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar matchesCount = jQuery(actual).find(selector).length;\r\n\r\n\t\t\t\t// If the cardinality is not specified,\r\n\t\t\t\t// the test passes if there is at least one child element matching the selector.\r\n\t\t\t\tif(cardinality === undefined){\r\n\t\t\t\t\tif(matchesCount > 0){\r\n\t\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tresult.message = \"Element \" + actual + \" does not contain any element matched by: \" + selector;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(matchesCount === cardinality) {\r\n\t\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tresult.message = \"Element \" + actual + \" contains \" + matchesCount + \" elements matched by: \" + selector + \" and not \" + cardinality;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeMatchedBy = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @param {String} selector\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, selector){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(selector) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the selector as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(jQuery(actual).filter(selector).length > 0){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element not matched by: \" + selector;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeSelected = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(actual).is(\":selected\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not selected\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeVisible = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(actual).is(\":visible\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not visible\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveAttr = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @param {String} attributeName\r\n\t\t\t * @param {String} expectedValue\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, attributeName, expectedValue){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(attributeName) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the attribute as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(hasProperty(jQuery(actual).attr(attributeName), expectedValue) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Attribute: \" + attributeName + \" does not match\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveClass = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @param {String} className\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, className){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(className) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the name of the CSS class as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(jQuery(actual).hasClass(className) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"CSS class: \" + className + \" not found\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveCss = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @param {String} propertyName\r\n\t\t\t * @param {String} expectedValue\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, propertyName, expectedValue){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(propertyName) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the CSS property as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\t// Second case is Chrome only\r\n\t\t\t\tif(jQuery(actual).css(propertyName) === \"\" || jQuery(actual).css(propertyName) === \"0px\"){\r\n\t\t\t\t\tresult.message = \"CSS property: \" + propertyName + \" not found\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(hasProperty(jQuery(actual).css(propertyName), expectedValue) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"CSS property: \" + propertyName + \" does not match\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveProp = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} actual\r\n\t\t\t * @param {String} propertyName\r\n\t\t\t * @param {String} expectedValue\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, propertyName, expectedValue){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(propertyName) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the property as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(hasProperty(jQuery(actual).prop(propertyName), expectedValue) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Property: \" + propertyName + \" does not match\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmine.getEnv().beforeEach(function(){\r\n\t\tjasmine.getEnv().addMatchers(jasmineMatchers);\r\n\t});\r\n\r\n}());"],"sourceRoot":"."}