/*! 
jasmineMatchers 0.5 2018-04-04T11:53:03.611Z
https://github.com/MassimoFoti/jasmineMatchers
Copyright 2018 Massimo Foti (massimo@massimocorner.com)
Licensed under the Apache License, Version 2.0 | http://www.apache.org/licenses/LICENSE-2.0
 */
if("undefined"==typeof jQuery)throw"Unable to find jQuery";void 0===window.jasmineMatchers&&(window.jasmineMatchers={}),function(){"use strict";jasmineMatchers.version="0.5";var isPrimitive=function(actual){return!1===actual||!0===actual||(null==actual||("number"==typeof actual||"string"==typeof actual))},isValidElement=function(element){return element instanceof HTMLElement||element instanceof jQuery};jasmineMatchers.toBeExtensible=function(){return{compare:function(actual){var result={pass:!1};return!0===isPrimitive(actual)?(result.pass=!1,result.message="Expected: "+actual+" to be extensible"):!0===Object.isExtensible(actual)?result.pass=!0:result.message="Expected: "+actual+" to be extensible",result}}},jasmineMatchers.toBeFalse=function(){return{compare:function(actual){var result={pass:!1};return!1===actual?result.pass=!0:result.message="Expected: "+actual+" to equal: false",result}}},jasmineMatchers.toBeFrozen=function(){return{compare:function(actual){var result={pass:!1};return!0===isPrimitive(actual)?(result.pass=!1,result.message="Expected: "+actual+" to be frozen"):!0===Object.isFrozen(actual)?result.pass=!0:result.message="Expected: "+actual+" to be frozen",result}}},jasmineMatchers.toBeInstanceOf=function(){return{compare:function(actual,type){var result={pass:!1};return void 0===type?result.message="Please specify the object to test against":actual instanceof type==!0?result.pass=!0:result.message="Expected: "+actual+" to be instanceof of: "+type,result}}},jasmineMatchers.toBeSealed=function(){return{compare:function(actual){var result={pass:!1};return!0===isPrimitive(actual)?(result.pass=!1,result.message="Expected: "+actual+" to be sealed"):!0===Object.isSealed(actual)?result.pass=!0:result.message="Expected: "+actual+" to be sealed",result}}},jasmineMatchers.toBeTrue=function(){return{compare:function(actual){var result={pass:!1};return!0===actual?result.pass=!0:result.message="Expected: "+actual+" to equal: true",result}}},jasmineMatchers.toHaveProperty=function(){return{compare:function(actual,propertyName,expectedValue){var result={pass:!1};return"string"!==jQuery.type(propertyName)?result.message="Please specify the property as string":void 0===actual[propertyName]?result.message="Property: "+propertyName+" not found":!0===hasProperty(actual[propertyName],expectedValue)?result.pass=!0:result.message="Expected: "+propertyName+" to equal: "+expectedValue+" but current value is: "+actual[propertyName],result}}},jasmineMatchers.toHaveReadonlyProperty=function(){return{compare:function(actual,property){var result={pass:!1};if("string"!==jQuery.type(property))return result.message="Please specify the name of the property as string",result;var desc=Object.getOwnPropertyDescriptor(actual,property);return void 0===desc?result.message="Unable to find property: "+property:!1===desc.writable?result.pass=!0:result.message="Property: "+property+" is not readonly",result}}},jasmineMatchers.toMatchDuckType=function(){return{compare:function(actual,duckType,matchType){var result={pass:!1};if(void 0===duckType)return result.message="Please specify an instance of a duckType",result;if(jQuery.type(actual)!==jQuery.type(duckType))return result.message="Type mismatch, comparing: "+jQuery.type(actual)+" vs "+jQuery.type(duckType),result;for(var key in void 0===matchType&&(matchType=!0),duckType)if(!0===duckType.hasOwnProperty(key)){var duckProp=duckType[key];if(!0!==actual.hasOwnProperty(key))return result.message="The following duck property is missing: ."+key,result;if(!0===matchType&&jQuery.type(duckProp)!==jQuery.type(actual[key]))return result.pass=!1,result.message="Type of: ."+key+" does not match. Supposed to be: "+jQuery.type(duckProp),result}return result.pass=!0,result}}};var hasProperty=function(actualValue,expectedValue){return void 0===expectedValue?void 0!==actualValue:actualValue===expectedValue};jasmineMatchers.toBeChecked=function(){return{compare:function(actual){var result={pass:!1};return!0===jQuery(actual).is(":checked")?result.pass=!0:result.message="Element is not checked",result}}},jasmineMatchers.toBeDisabled=function(){return{compare:function(actual){var result={pass:!1};return!0===jQuery(actual).is(":disabled")?result.pass=!0:result.message="Element is not disabled",result}}},jasmineMatchers.toBeEmpty=function(){return{compare:function(actual){var result={pass:!1};return!0===jQuery(actual).is(":empty")?result.pass=!0:result.message="Element is not empty",result}}},jasmineMatchers.toContainElement=function(){return{compare:function(actual,element){var result={pass:!1};return!1===isValidElement(actual)?result.message="Please specify an Element as parent":!1===isValidElement(element)?result.message="Please specify an Element as child":0<jQuery(actual).find(element).length?result.pass=!0:result.message="Element "+element+" is not contained in "+actual,result}}},jasmineMatchers.toContainElementsMatching=function(){return{compare:function(actual,selector,cardinality){var result={pass:!1};if(!1===isValidElement(actual))return result.message="Please specify an Element as container",result;if("string"!==jQuery.type(selector))return result.message="Please specify the selector as string",result;if("undefined"!==jQuery.type(cardinality)&&"number"!==jQuery.type(cardinality))return result.message="Please specify the cardinality as number",result;var matchesCount=jQuery(actual).find(selector).length;return void 0===cardinality?0<matchesCount?result.pass=!0:result.message="Element "+actual+" does not contain any element matched by: "+selector:matchesCount===cardinality?result.pass=!0:result.message="Element "+actual+" contains "+matchesCount+" elements matched by: "+selector+" and not "+cardinality,result}}},jasmineMatchers.toBeMatchedBy=function(){return{compare:function(actual,selector){var result={pass:!1};return"string"!==jQuery.type(selector)?result.message="Please specify the selector as string":0<jQuery(actual).filter(selector).length?result.pass=!0:result.message="Element not matched by: "+selector,result}}},jasmineMatchers.toBeSelected=function(){return{compare:function(actual){var result={pass:!1};return!0===jQuery(actual).is(":selected")?result.pass=!0:result.message="Element is not selected",result}}},jasmineMatchers.toBeVisible=function(){return{compare:function(actual){var result={pass:!1};return!0===jQuery(actual).is(":visible")?result.pass=!0:result.message="Element is not visible",result}}},jasmineMatchers.toHaveAttr=function(){return{compare:function(actual,attributeName,expectedValue){var result={pass:!1};return"string"!==jQuery.type(attributeName)?result.message="Please specify the attribute as string":!0===hasProperty(jQuery(actual).attr(attributeName),expectedValue)?result.pass=!0:result.message="Attribute: "+attributeName+" does not match",result}}},jasmineMatchers.toHaveClass=function(){return{compare:function(actual,className){var result={pass:!1};return"string"!==jQuery.type(className)?result.message="Please specify the name of the CSS class as string":!0===jQuery(actual).hasClass(className)?result.pass=!0:result.message="CSS class: "+className+" not found",result}}},jasmineMatchers.toHaveCss=function(){return{compare:function(actual,propertyName,expectedValue){var result={pass:!1};return"string"!==jQuery.type(propertyName)?result.message="Please specify the CSS property as string":""===jQuery(actual).css(propertyName)||"0px"===jQuery(actual).css(propertyName)?result.message="CSS property: "+propertyName+" not found":!0===hasProperty(jQuery(actual).css(propertyName),expectedValue)?result.pass=!0:result.message="CSS property: "+propertyName+" does not match",result}}},jasmineMatchers.toHaveProp=function(){return{compare:function(actual,propertyName,expectedValue){var result={pass:!1};return"string"!==jQuery.type(propertyName)?result.message="Please specify the property as string":!0===hasProperty(jQuery(actual).prop(propertyName),expectedValue)?result.pass=!0:result.message="Property: "+propertyName+" does not match",result}}},jasmine.getEnv().beforeEach(function(){jasmine.getEnv().addMatchers(jasmineMatchers)})}();
//# sourceMappingURL=jasmineMatchers.min.js.map
