{"version":3,"sources":["jasmineTree.js"],"names":["window","jasmineTree","version","CONST","CSS_CLASSES","SUMMARY","TRIGGER","TOOLBAR","BUTTON","NODE_OPENED","SELECTORS","FIRST_CHILD","ROOT_SUITE","NODE_TITLE","NODE_SPECS","NODE_SUITES","TEXT","COLLAPSE","EXPAND","SEPARATOR","PLUS","MINUS","FILTER_REGEXP","RegExp","rootSuites","getSpecFilter","searchStr","match","exec","filter","decodeURIComponent","replace","collapseAll","i","length","collapse","expandAll","expand","addRootClass","document","querySelector","classList","add","addToolbar","toolbar","createElement","textContent","appendChild","separator","addEventListener","event","preventDefault","summaryNode","parentNode","insertBefore","filterSpec","location","search","undefined","containsPath","Suite","options","config","rootNode","rootPath","self","this","suites","specs","fullPath","expanded","triggerNode","attachEvents","nodeMatches","node","selector","methodName","matches","msMatchesSelector","getPath","path","str","subStr","substring","j","trim","show","style","display","hide","remove","titleNode","Array","prototype","slice","call","children","forEach","item","linkNode","push","childSuite","init","querySelectorAll","suite","__karma__","jasmine","getEnv","addReporter","jasmineDone"],"mappings":"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","file":"jasmineTree.min.js","sourcesContent":["/* istanbul ignore else */\r\nif(typeof(window.jasmineTree) === \"undefined\"){\r\n\twindow.jasmineTree = {};\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tjasmineTree.version = \"2.0\";\r\n\r\n\tconst CONST = {\r\n\t\tCSS_CLASSES: {\r\n\t\t\tSUMMARY: \"jasmine-tree-summary\",\r\n\t\t\tTRIGGER: \"jasmine-tree-trigger\",\r\n\t\t\tTOOLBAR: \"jasmine-tree-toolbar\",\r\n\t\t\tBUTTON: \"jasmine-tree-button\",\r\n\t\t\tNODE_OPENED: \"jasmine-tree-opennode\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tFIRST_CHILD: \":first-child\",\r\n\t\t\tSUMMARY: \".jasmine-summary\",\r\n\t\t\tROOT_SUITE: \".jasmine-summary > .jasmine-suite\",\r\n\t\t\tNODE_TITLE: \"li.jasmine-suite-detail\",\r\n\t\t\tNODE_SPECS: \"ul.jasmine-specs\",\r\n\t\t\tNODE_SUITES: \"ul.jasmine-suite\"\r\n\t\t},\r\n\t\tTEXT: {\r\n\t\t\tCOLLAPSE: \"Collapse All\",\r\n\t\t\tEXPAND: \"Expand All\",\r\n\t\t\tSEPARATOR: \" | \",\r\n\t\t\tPLUS: \"+\",\r\n\t\t\tMINUS: \"-\"\r\n\t\t},\r\n\t\tFILTER_REGEXP: (new RegExp(\"[?&]spec=([^&]*)\"))\r\n\t};\r\n\r\n\t/** @type {Array.<jasmineTree.Suite>} */\r\n\tconst rootSuites = [];\r\n\r\n\t/**\r\n\t * Returns the value of the \"spec\" parameter in the given string. Undefined if it's not specified\r\n\t * @param {String} searchStr\r\n\t * @return {undefined|String}\r\n\t */\r\n\tjasmineTree.getSpecFilter = function(searchStr){\r\n\t\tconst match = CONST.FILTER_REGEXP.exec(searchStr);\r\n\t\tif(match !== null){\r\n\t\t\tconst filter = decodeURIComponent(match[1].replace(/\\+/g, \" \"));\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(filter !== \"\"){\r\n\t\t\t\treturn filter;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Collapse all the suites\r\n\t */\r\n\tjasmineTree.collapseAll = function(){\r\n\t\tfor(let i = 0; i < rootSuites.length; i++){\r\n\t\t\trootSuites[i].collapse();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Expand all the suites\r\n\t */\r\n\tjasmineTree.expandAll = function(){\r\n\t\tfor(let i = 0; i < rootSuites.length; i++){\r\n\t\t\trootSuites[i].expand();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Add a CSS class to the summary to enable more specific CSS selectors\r\n\t */\r\n\tjasmineTree.addRootClass = function(){\r\n\t\tdocument.querySelector(CONST.SELECTORS.SUMMARY).classList.add(CONST.CSS_CLASSES.SUMMARY);\r\n\t};\r\n\r\n\t/**\r\n\t * Insert toolbar with expand/collapse all buttons\r\n\t */\r\n\tjasmineTree.addToolbar = function(){\r\n\r\n\t\tconst toolbar = document.createElement(\"div\");\r\n\t\ttoolbar.classList.add(CONST.CSS_CLASSES.TOOLBAR);\r\n\r\n\t\tconst collapse = document.createElement(\"span\");\r\n\t\tcollapse.classList.add(CONST.CSS_CLASSES.BUTTON);\r\n\t\tcollapse.textContent = CONST.TEXT.COLLAPSE;\r\n\t\ttoolbar.appendChild(collapse);\r\n\r\n\t\tconst separator = document.createElement(\"span\");\r\n\t\tseparator.textContent = CONST.TEXT.SEPARATOR;\r\n\t\ttoolbar.appendChild(separator);\r\n\r\n\t\tconst expand = document.createElement(\"span\");\r\n\t\texpand.classList.add(CONST.CSS_CLASSES.BUTTON);\r\n\t\texpand.textContent = CONST.TEXT.EXPAND;\r\n\t\ttoolbar.appendChild(expand);\r\n\r\n\t\tcollapse.addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tjasmineTree.collapseAll();\r\n\t\t});\r\n\r\n\t\texpand.addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tjasmineTree.expandAll();\r\n\t\t});\r\n\r\n\t\tconst summaryNode = document.querySelector(CONST.SELECTORS.SUMMARY);\r\n\t\tsummaryNode.parentNode.insertBefore(toolbar, summaryNode);\r\n\t};\r\n\r\n\t/**\r\n\t * Check the querystring and expand/collapse suites based on filter criteria (if any)\r\n\t */\r\n\tjasmineTree.filterSpec = function(){\r\n\t\tconst filter = jasmineTree.getSpecFilter(window.location.search);\r\n\t\tif(filter === undefined){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// We have a filter. First collapse all\r\n\t\tjasmineTree.collapseAll();\r\n\t\t// Then expand only the suites that match\r\n\t\tfor(let i = 0; i < rootSuites.length; i++){\r\n\t\t\tif(rootSuites[i].containsPath(filter) === true){\r\n\t\t\t\trootSuites[i].expand();\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} jasmineTree.Suite.options\r\n\t *\r\n\t * @property {HTMLElement} rootNode\r\n\t * @property {String} rootPath\r\n\t */\r\n\r\n\t/**\r\n\t * Wrapper around a suite's HTML node. Adds expand/collapse capabilities\r\n\t * @param {jasmineTree.Suite.options} options\r\n\t * @constructor\r\n\t */\r\n\tjasmineTree.Suite = function(options){\r\n\t\t/**\r\n\t\t * @type {jasmineTree.Suite.options}\r\n\t\t */\r\n\t\tconst config = {\r\n\t\t\trootNode: options.rootNode,\r\n\t\t\trootPath: options.rootPath\r\n\t\t};\r\n\t\tif(config.rootPath === undefined){\r\n\t\t\tconfig.rootPath = \"\";\r\n\t\t}\r\n\r\n\t\t/** @type  {jasmineTree.Suite} */\r\n\t\tconst self = this;\r\n\r\n\t\t/** @type {Array.<jasmineTree.Suite>} */\r\n\t\tconst suites = [];\r\n\t\t/** @type {Array.<jQuery>} */\r\n\t\tconst specs = [];\r\n\r\n\t\tlet fullPath = \"\";\r\n\t\tlet expanded = true;\r\n\r\n\t\tconst triggerNode = document.createElement(\"a\");\r\n\t\ttriggerNode.classList.add(CONST.CSS_CLASSES.TRIGGER);\r\n\t\ttriggerNode.textContent = CONST.TEXT.MINUS;\r\n\r\n\t\tconst init = function(){\r\n\t\t\tconfig.rootNode.classList.add(CONST.CSS_CLASSES.NODE_OPENED);\r\n\r\n\t\t\tlet titleNode;\r\n\t\t\tArray.prototype.slice.call(config.rootNode.children).forEach(function(item){\r\n\t\t\t\tif(nodeMatches(item, CONST.SELECTORS.NODE_TITLE) === true){\r\n\t\t\t\t\ttitleNode = item;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tfullPath = config.rootPath + titleNode.textContent.trim();\r\n\r\n\t\t\tconst linkNode = titleNode.querySelector(CONST.SELECTORS.FIRST_CHILD);\r\n\t\t\tlinkNode.parentNode.insertBefore(triggerNode, linkNode);\r\n\r\n\t\t\tArray.prototype.slice.call(config.rootNode.children).forEach(function(item){\r\n\t\t\t\tif(nodeMatches(item, CONST.SELECTORS.NODE_SPECS) === true){\r\n\t\t\t\t\tspecs.push(item);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tArray.prototype.slice.call(config.rootNode.children).forEach(function(item){\r\n\t\t\t\tif(nodeMatches(item, CONST.SELECTORS.NODE_SUITES) === true){\r\n\t\t\t\t\tconst childSuite = new jasmineTree.Suite({\r\n\t\t\t\t\t\trootNode: item,\r\n\t\t\t\t\t\trootPath: fullPath + \" \"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsuites.push(childSuite);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tattachEvents();\r\n\t\t};\r\n\r\n\t\tconst attachEvents = function(){\r\n\t\t\ttriggerNode.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tif(expanded === true){\r\n\t\t\t\t\tself.collapse();\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tself.expand();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Equalize element.matches across browsers\r\n\t\t * @param {HTMLElement} node\r\n\t\t * @param {String} selector\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tconst nodeMatches = function(node, selector){\r\n\t\t\tlet methodName = \"matches\";\r\n\t\t\t// Deal with IE11 without polyfills\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\tif(node.matches === undefined && node.msMatchesSelector !== undefined){\r\n\t\t\t\tmethodName = \"msMatchesSelector\";\r\n\t\t\t}\r\n\t\t\treturn node[methodName](selector);\r\n\t\t};\r\n\r\n\t\tconst startsWith = function(str, subStr){\r\n\t\t\treturn (str.substring(0, subStr.length) === subStr);\r\n\t\t};\r\n\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn fullPath;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Given a filter string, coming from the querystring, search if the suite contains specs that match it\r\n\t\t * @param {String} path\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.containsPath = function(path){\r\n\t\t\t// Matches the suite\r\n\t\t\tif(startsWith(self.getPath(), path) === true){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t// Search inside child specs\r\n\t\t\tfor(let j = 0; j < specs.length; j++){\r\n\t\t\t\tconst specPath = self.getPath() + \" \" + specs[j].textContent.trim();\r\n\t\t\t\tif(specPath === path){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Search inside child suites\r\n\t\t\tfor(let i = 0; i < suites.length; i++){\r\n\t\t\t\tif(suites[i].containsPath(path) === true){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t\tthis.show = function(){\r\n\t\t\tconfig.rootNode.style.display = \"block\";\r\n\t\t};\r\n\r\n\t\tthis.hide = function(){\r\n\t\t\tconfig.rootNode.style.display = \"none\";\r\n\t\t};\r\n\r\n\t\tthis.collapse = function(){\r\n\t\t\tconfig.rootNode.classList.remove(CONST.CSS_CLASSES.NODE_OPENED);\r\n\t\t\ttriggerNode.textContent = CONST.TEXT.PLUS;\r\n\t\t\tfor(let i = 0; i < suites.length; i++){\r\n\t\t\t\tsuites[i].collapse();\r\n\t\t\t\tsuites[i].hide();\r\n\t\t\t}\r\n\t\t\tfor(let j = 0; j < specs.length; j++){\r\n\t\t\t\tspecs[j].style.display = \"none\";\r\n\t\t\t}\r\n\t\t\texpanded = false;\r\n\t\t};\r\n\r\n\t\tthis.expand = function(){\r\n\t\t\tconfig.rootNode.classList.add(CONST.CSS_CLASSES.NODE_OPENED);\r\n\t\t\ttriggerNode.textContent = CONST.TEXT.MINUS;\r\n\t\t\tfor(let i = 0; i < suites.length; i++){\r\n\t\t\t\tsuites[i].expand();\r\n\t\t\t\tsuites[i].show();\r\n\t\t\t}\r\n\t\t\tfor(let j = 0; j < specs.length; j++){\r\n\t\t\t\tspecs[j].style.display = \"block\";\r\n\t\t\t}\r\n\t\t\texpanded = true;\r\n\t\t};\r\n\r\n\t\tinit();\r\n\t};\r\n\r\n\t/**\r\n\t * This must be invoked after Jasmine finished executing\r\n\t */\r\n\tjasmineTree.init = function(){\r\n\r\n\t\tArray.prototype.slice.call(document.querySelectorAll(CONST.SELECTORS.ROOT_SUITE)).forEach(function(item){\r\n\t\t\tconst suite = new jasmineTree.Suite({\r\n\t\t\t\trootNode: item\r\n\t\t\t});\r\n\t\t\trootSuites.push(suite);\r\n\t\t});\r\n\r\n\t\tjasmineTree.addRootClass();\r\n\t\tjasmineTree.addToolbar();\r\n\t\tjasmineTree.filterSpec();\r\n\t};\r\n\r\n\t/* istanbul ignore next */\r\n\tif(window.__karma__ === undefined){\r\n\t\tjasmine.getEnv().addReporter({\r\n\t\t\tjasmineDone: function(){\r\n\t\t\t\tjasmineTree.init();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}());"],"sourceRoot":"."}