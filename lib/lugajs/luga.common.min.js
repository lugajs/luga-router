/*! 
Luga Common 0.9.8 2018-04-09T01:00:35.180Z
http://www.lugajs.org
Copyright 2013-2018 Massimo Foti (massimo@massimocorner.com)
Licensed under the Apache License, Version 2.0 | http://www.apache.org/licenses/LICENSE-2.0
 */
"undefined"==typeof luga&&(window.luga={}),function(){"use strict";luga.namespace=function(ns,rootObject){const parts=ns.split(".");void 0===rootObject&&(rootObject=window);for(let i=0;i<parts.length;i++)void 0===rootObject[parts[i]]&&(rootObject[parts[i]]={}),rootObject=rootObject[parts[i]];return rootObject},luga.namespace("luga.common"),luga.common.version="0.9.8",luga.extend=function(baseFunc,func,args){baseFunc.apply(func,args)},luga.isPlainObject=function(obj){if("[object Object]"!==Object.prototype.toString.call(obj))return!1;const proto=Object.getPrototypeOf(obj);if(null===proto)return!0;const constructor=Object.prototype.hasOwnProperty.call(proto,"constructor")&&proto.constructor;return!1!==constructor&&(typeof("function"===constructor)&&Function.toString.call(constructor)===Function.toString.call(Object))},luga.lookupFunction=function(path){if(!path)return;const reference=luga.lookupProperty(window,path);return"function"===luga.type(reference)?reference:void 0},luga.lookupProperty=function(object,path){if(!object||!path)return;if(void 0!==object[path])return object[path];const parts=path.split(".");for(;parts.length>0;){const part=parts.shift();if(void 0!==object[part]){if(0===parts.length)return object[part];object=object[part]}}},luga.merge=function(target,source){for(let x in source)!0===source.hasOwnProperty(x)&&(target[x]=source[x])},luga.setProperty=function(object,path,value){const parts=path.split(".");for(1===parts.length&&(object[path]=value);parts.length>0;){const part=parts.shift();if(void 0!==object[part]){if(0===parts.length){object[part]=value;break}object=object[part]}else parts.length>0?(object[part]={},object=object[part]):object[part]=value}},luga.TO_QUERY_STRING_CONST={ERROR_INPUT:"luga.toQueryString: Can serialize only plain objects"},luga.toQueryString=function(input){if(!1===luga.isPlainObject(input))throw luga.TO_QUERY_STRING_CONST.ERROR_INPUT;let str="";for(let x in input)!0===Array.isArray(input[x])?input[x].forEach(function(element){str=appendQueryString(str,x,element)}):str=appendQueryString(str,x,input[x]);return str};const class2type={};["Array","Boolean","Date","Error","Function","Number","Object","RegExp","String","Symbol"].forEach(function(element){class2type["[object "+element+"]"]=element.toLowerCase()}),luga.type=function(obj){if(null===obj)return"null";const rawType=typeof obj;if("object"===rawType||"function"===rawType){const stringType=Object.prototype.toString.call(obj);return class2type[stringType]}return rawType},luga.NOTIFIER_CONST={ERROR_MESSAGES:{NOTIFIER_ABSTRACT:"It's forbidden to use luga.Notifier directly, it must be used as a base class instead",INVALID_GENERIC_OBSERVER_PARAMETER:"addObserver(): observer parameter must be an object",INVALID_EVENT_OBSERVER_PARAMETER:"addObserver(): eventName and methodName must be strings",INVALID_DATA_PARAMETER:"notifyObserver(): data parameter is required and must be an object"}},luga.Notifier=function(){if(this.constructor===luga.Notifier)throw luga.NOTIFIER_CONST.ERROR_MESSAGES.NOTIFIER_ABSTRACT;this.observers=[],this.eventObservers={};this.addObserver=function(observer,eventName,methodName){if("object"!==luga.type(observer))throw luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_GENERIC_OBSERVER_PARAMETER;if(1===arguments.length&&this.observers.push(observer),3===arguments.length){if("string"!==luga.type(eventName)||"string"!==luga.type(methodName))throw luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_EVENT_OBSERVER_PARAMETER;const eventMap={observer:observer,methodName:methodName};void 0===this.eventObservers[eventName]?this.eventObservers[eventName]=[eventMap]:-1===findObserverIndex(this.eventObservers[eventName],eventMap)&&this.eventObservers[eventName].push(eventMap)}};const findObserverIndex=function(eventArray,eventMap){for(let i=0;i<eventArray.length;i++){const currentMap=eventArray[i];if(currentMap.observer===eventMap.observer&&currentMap.methodName===eventMap.methodName)return i}return-1};this.notifyObservers=function(eventName,payload){if("object"!==luga.type(payload))throw luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_DATA_PARAMETER;const genericMethod=function(eventName){let str="on";return str+=eventName.charAt(0).toUpperCase(),str+=eventName.substring(1),str+="Handler"}(eventName);this.observers.forEach(function(element){void 0!==element[genericMethod]&&"function"===luga.type(element[genericMethod])&&element[genericMethod](payload)});const eventObservers=this.eventObservers[eventName];void 0!==eventObservers&&eventObservers.forEach(function(element){"function"===luga.type(element.observer[element.methodName])&&element.observer[element.methodName](payload)})},this.removeObserver=function(observer,eventName,methodName){if(1===arguments.length)for(let i=0;i<this.observers.length;i++)if(this.observers[i]===observer){this.observers.splice(i,1);break}if(3===arguments.length&&void 0!==this.eventObservers[eventName]){const eventMap={observer:observer,methodName:methodName},index=findObserverIndex(this.eventObservers[eventName],eventMap);-1!==index&&(this.eventObservers[eventName].splice(index,1),0===this.eventObservers[eventName].length&&delete this.eventObservers[eventName])}}},luga.namespace("luga.dom"),luga.dom.delegateEvent=function(node,eventType,selector,callback){node.addEventListener(eventType,function(event){const currentElement=event.target;!0===luga.dom.nodeMatches(currentElement,selector)&&callback(event,currentElement)})},luga.dom.nodeMatches=function(node,selector){let methodName="matches";return void 0===node.matches&&void 0!==node.msMatchesSelector&&(methodName="msMatchesSelector"),node[methodName](selector)},luga.dom.ready=function(fn){document.addEventListener("DOMContentLoaded",fn)};const getIteratorInstance=function(type,rootNode,filterFunc){const filter_acceptNode=function(node){return void 0!==filterFunc&&!1===filterFunc(node)?NodeFilter.FILTER_SKIP:NodeFilter.FILTER_ACCEPT},safeFilter=filter_acceptNode;return safeFilter.acceptNode=filter_acceptNode,"TreeWalker"===type?document.createTreeWalker(rootNode,NodeFilter.SHOW_ELEMENT,safeFilter,!1):document.createNodeIterator(rootNode,NodeFilter.SHOW_ELEMENT,safeFilter,!1)};luga.namespace("luga.dom.nodeIterator"),luga.dom.nodeIterator.getInstance=function(rootNode,filterFunc){return getIteratorInstance("NodeIterator",rootNode,filterFunc)},luga.namespace("luga.dom.treeWalker"),luga.dom.treeWalker.getInstance=function(rootNode,filterFunc){return getIteratorInstance("TreeWalker",rootNode,filterFunc)},luga.namespace("luga.form"),luga.form.CONST={FIELD_SELECTOR:"input,select,textarea",FAKE_INPUT_TYPES:{fieldset:!0,reset:!0},MESSAGES:{MISSING_FORM:"Unable to load form"}},luga.form.toMap=function(rootNode,demoronize){if(null===rootNode)throw luga.form.CONST.MESSAGES.MISSING_FORM;const map={},fields=luga.form.utils.getChildFields(rootNode);for(let i=0;i<fields.length;i++){const element=fields[i];if(!0===luga.form.utils.isSuccessfulField(element)){const fieldName=element.getAttribute("name");let fieldValue=null;switch(element.type){case"select-multiple":fieldValue=getMultiSelectValue(element);break;case"checkbox":case"radio":!0===element.checked&&(fieldValue=element.value);break;default:fieldValue=element.value}null!==fieldValue&&(!0===demoronize&&(fieldValue=luga.string.demoronize(fieldValue)),void 0===map[fieldName]?map[fieldName]=fieldValue:!0===Array.isArray(map[fieldName])?map[fieldName].push(fieldValue):map[fieldName]=[map[fieldName],fieldValue])}}return map};const getMultiSelectValue=function(node){const fieldValue=[],options=node.querySelectorAll("option:checked");for(let i=0;i<options.length;i++)fieldValue.push(options[i].value);return fieldValue};luga.form.toJson=function(rootNode){const flatData=luga.form.toMap(rootNode),jsonData={};for(let x in flatData)luga.setProperty(jsonData,x,flatData[x]);return jsonData},luga.form.toQueryString=function(rootNode,demoronize){if(null===rootNode)throw luga.form.CONST.MESSAGES.MISSING_FORM;let str="";const fields=luga.form.utils.getChildFields(rootNode);for(let i=0;i<fields.length;i++){const element=fields[i];if(!0===luga.form.utils.isSuccessfulField(element)){const fieldName=element.getAttribute("name");switch(element.type){case"select-multiple":const multiValues=getMultiSelectValue(element);for(let j=0;j<multiValues.length;j++)str=appendQueryString(str,fieldName,multiValues[i],demoronize);break;case"checkbox":case"radio":!0===element.checked&&(str=appendQueryString(str,fieldName,element.value,demoronize));break;default:str=appendQueryString(str,fieldName,element.value,demoronize)}}}return str};const appendQueryString=function(str,fieldName,fieldValue,demoronize){return""!==str&&(str+="&"),str+=encodeURIComponent(fieldName),str+="=",str+=!0===demoronize?encodeURIComponent(luga.string.demoronize(fieldValue)):encodeURIComponent(fieldValue)};luga.namespace("luga.form.utils"),luga.form.utils.isSuccessfulField=function(fieldNode){return!1!==luga.form.utils.isInputField(fieldNode)&&(!0!==fieldNode.disabled&&null!==fieldNode.getAttribute("name"))},luga.form.utils.isInputField=function(fieldNode){return void 0!==fieldNode.type&&!0!==luga.form.CONST.FAKE_INPUT_TYPES[fieldNode.type]},luga.form.utils.getFieldGroup=function(name,rootNode){void 0===rootNode&&(rootNode=document.body);const selector="input[name='"+name+"']",nodes=rootNode.querySelectorAll(selector);return Array.prototype.slice.call(nodes)},luga.form.utils.getChildFields=function(rootNode){const fields=[],nodes=rootNode.querySelectorAll(luga.form.CONST.FIELD_SELECTOR);for(let i=0;i<nodes.length;i++){const element=nodes[i];!0===luga.form.utils.isInputField(element)&&fields.push(element)}return fields},luga.namespace("luga.localStorage"),luga.localStorage.retrieve=function(root,path){return luga.lookupProperty(getRootState(root),path.toString())},luga.localStorage.persist=function(root,path,value){const json=getRootState(root);luga.setProperty(json,path.toString(),value),setRootState(root,json)};const setRootState=function(root,json){localStorage.setItem(root,JSON.stringify(json))},getRootState=function(root){const rootJson=localStorage.getItem(root);return null===rootJson?{}:JSON.parse(rootJson)};luga.namespace("luga.string"),luga.string.demoronize=function(str){return str=(str=(str=(str=(str=(str=(str=(str=(str=(str=(str=(str=str.replace(new RegExp(String.fromCharCode(710),"g"),"^")).replace(new RegExp(String.fromCharCode(732),"g"),"~")).replace(new RegExp(String.fromCharCode(8216),"g"),"'")).replace(new RegExp(String.fromCharCode(8217),"g"),"'")).replace(new RegExp(String.fromCharCode(8220),"g"),'"')).replace(new RegExp(String.fromCharCode(8221),"g"),'"')).replace(new RegExp(String.fromCharCode(8211),"g"),"-")).replace(new RegExp(String.fromCharCode(8212),"g"),"--")).replace(new RegExp(String.fromCharCode(8218),"g"),",")).replace(new RegExp(String.fromCharCode(8222),"g"),",,")).replace(new RegExp(String.fromCharCode(8226),"g"),"*")).replace(new RegExp(String.fromCharCode(8230),"g"),"...")},luga.string.format=function(str,args){let pattern=null;if(!0===Array.isArray(args))for(let i=0;i<args.length;i++)pattern=new RegExp("\\{"+i+"\\}","g"),str=str.replace(pattern,args[i]);if(!0===luga.isPlainObject(args))for(let x in args)pattern=new RegExp("\\{"+x+"\\}","g"),str=str.replace(pattern,args[x]);return str},luga.string.queryToMap=function(str){const map={};if("?"===str.charAt(0)&&(str=str.substring(1)),0===str.length)return map;const parts=str.split("&");for(let i=0;i<parts.length;i++){const tokens=parts[i].split("="),fieldName=decodeURIComponent(tokens[0]);let fieldValue="";2===tokens.length&&(fieldValue=decodeURIComponent(tokens[1])),void 0===map[fieldName]?map[fieldName]=fieldValue:!0===Array.isArray(map[fieldName])?map[fieldName].push(fieldValue):map[fieldName]=[map[fieldName],fieldValue]}return map};const propertyPattern=new RegExp("\\{([^}]*)}","g");luga.string.populate=function(str,obj){if(!0===luga.isPlainObject(obj)){let results;for(;null!==(results=propertyPattern.exec(str));){const property=luga.lookupProperty(obj,results[1]);if(void 0!==property){const pattern=new RegExp(results[0],"g");str=str.replace(pattern,property),propertyPattern.test(str)}}}return str},luga.namespace("luga.xhr"),luga.XHR_CONST={POST_CONTENT_TYPE:"application/x-www-form-urlencoded"},luga.xhr.Request=function(options){const config={method:"GET",success:function(res){console.debug(res)},error:function(res){console.debug(res)},timeout:5e3,async:!0,cache:!0,headers:[],requestedWith:"XMLHttpRequest",contentType:"text/plain"};void 0!==options&&luga.merge(config,options),"POST"===config.method.toUpperCase()&&(config.contentType=luga.XHR_CONST.POST_CONTENT_TYPE);const self=this;self.xhr=new XMLHttpRequest;const assembleResponse=function(){return{status:self.xhr.status,statusText:self.xhr.statusText,responseText:self.xhr.responseText,responseType:self.xhr.responseType,responseXML:self.xhr.responseXML,headers:function(str){const headers=str.split("\r\n");return headers.pop(),headers.map(function(item){const tokens=item.split(":"),ret={header:tokens[0]};return void 0!==tokens[1]&&(ret.value=tokens[1].substring(1)),ret})}(self.xhr.getAllResponseHeaders())}},checkReadyState=function(){if(4===self.xhr.readyState){const httpStatus=self.xhr.status;httpStatus>=200&&httpStatus<=300||304===httpStatus?config.success(assembleResponse()):config.error(assembleResponse())}};this.abort=function(){self.xhr.abort()},this.isRequestPending=function(){return 4!==self.xhr.readyState},this.send=function(url,params){void 0===params&&(params=null),url=function(url,params){let suffix="";return!1===config.cache&&(suffix+="_anti-cache="+Date.now()+"&"),null!==params&&"GET"===config.method.toUpperCase()&&(suffix+=params),""!==suffix&&(-1!==url.indexOf("?")?url+="&":url+="?"),url+suffix}(url,params),self.xhr.open(config.method,url,config.async),function(url){self.xhr.onreadystatechange=checkReadyState,self.xhr.timeout=config.timeout,self.xhr.setRequestHeader("Content-Type",config.contentType),"http"!==url.substring(0,4)&&self.xhr.setRequestHeader("X-Requested-With",config.requestedWith),config.headers.forEach(function(element){self.xhr.setRequestHeader(element.name,element.value)})}(url),self.xhr.send(params)}}}();
//# sourceMappingURL=luga.common.min.js.map
